@page "/Student/Grades"
@model StudentPeformanceTracker.Pages.Student.StudentGradesModel
@{
    ViewData["Title"] = "My Grades";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Student Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #f5f5f5;
            --accent-color: #FF9800;
            --text-color: #333;
            --border-color: #e0e0e0;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f9f9f9;
            color: var(--text-color);
            overflow-x: hidden;
        }
        
        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: var(--sidebar-width);
            background-color: var(--primary-color);
            color: white;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        
        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }
        
        .sidebar-header {
            padding: 1.5rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            text-align: center;
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar.collapsed .sidebar-header h3 {
            display: none;
        }
        
        .sidebar-menu {
            padding: 1rem 0;
        }
        
        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }
        
        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: rgba(255,255,255,0.1);
            color: white;
            border-left: 4px solid var(--accent-color);
        }
        
        .sidebar-menu i {
            width: 24px;
            margin-right: 1rem;
            text-align: center;
        }
        
        .sidebar.collapsed .sidebar-menu span {
            display: none;
        }
        
        .sidebar.collapsed .sidebar-menu i {
            margin-right: 0;
        }
        
        .toggle-btn {
            position: absolute;
            top: 1rem;
            right: -15px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        /* Main Content Area */
        .main-content {
            margin-left: var(--sidebar-width);
            transition: all 0.3s ease;
            min-height: 100vh;
            background-color: #f9f9f9;
        }
        
        .main-content.expanded {
            margin-left: var(--sidebar-collapsed-width);
        }
        
        .dashboard-header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 0;
        }
        
        .card-custom {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            border: none;
        }
        
        .card-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .section-title {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--accent-color);
            padding-bottom: 0.5rem;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .table th {
            background-color: var(--primary-color);
            color: white;
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    <nav class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h3><i class="fas fa-user-graduate me-2"></i>Student Portal</h3>
        </div>
        <button class="toggle-btn" id="toggleBtn">
            <i class="fas fa-chevron-left"></i>
        </button>
        <div class="sidebar-menu">
            <ul>
                <li>
                    <a href="/Student/Dashboard">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="/Student/Enrollment">
                        <i class="fas fa-graduation-cap"></i>
                        <span>Enrollment</span>
                    </a>
                </li>
                <li>
                    <a href="/Student/MyClasses">
                        <i class="fas fa-book"></i>
                        <span>My Classes</span>
                    </a>
                </li>
                <li>
                    <a href="/Student/Grades" class="active">
                        <i class="fas fa-chart-line"></i>
                        <span>Grades</span>
                    </a>
                </li>
                <li>
                    <a href="/Student/Announcements">
                        <i class="fas fa-bullhorn"></i>
                        <span>Announcements</span>
                    </a>
                </li>
                <li>
                    <a href="/Student/Profile">
                        <i class="fas fa-user"></i>
                        <span>Profile</span>
                    </a>
                </li>
                <li>
                    <a href="/LoginPage">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">My Grades</h1>
                    <div class="d-flex align-items-center">
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=4CAF50&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="/Student/Profile"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="/LoginPage"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Grades List -->
            <div class="card-custom">
                <h3 class="section-title">My Grades</h3>
                <div class="d-flex align-items-center gap-2 mb-3">
                    <label for="classFilter" class="form-label mb-0 me-2"><strong>Class:</strong></label>
                    <select id="classFilter" class="form-select form-select-sm" style="max-width: 340px;"></select>
                    <button class="btn btn-outline-secondary btn-sm ms-auto" id="exportExcelBtn"><i class="fas fa-file-excel me-2"></i>Export Excel</button>
                </div>
                <div id="gradesContainer" class="row g-3">
                    <div class="text-center py-4">
                        <i class="fas fa-spinner fa-spin fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Loading your grades...</p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle sidebar functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
        
        // Load student data on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadStudentData();
        });

        let currentStudentId = null;
        let allGrades = [];
        let currentFilterKey = '';

        // Load student data from API
        async function loadStudentData() {
            try {
                // Get current user from authenticated API
                const response = await fetch('/api/v1/student/profile');
                if (response.ok) {
                    const studentData = await response.json();
                    currentStudentId = studentData.id;
                    updateHeader(studentData);
                    loadMyGrades(studentData.id);
                } else {
                    console.error('Failed to load student data');
                    // Fallback: try to get from student list
                    await loadFromStudentList();
                }
            } catch (error) {
                console.error('Error loading student data:', error);
                await loadFromStudentList();
            }
        }

        // Fallback: load from student list
        async function loadFromStudentList() {
            try {
                const response = await fetch('/api/v1/student');
                if (response.ok) {
                    const students = await response.json();
                    if (students.length > 0) {
                        // Use first student as example (in real app, get current user)
                        const studentData = students[0];
                        currentStudentId = studentData.id;
                        updateHeader(studentData);
                        loadMyGrades(studentData.id);
                    }
                }
            } catch (error) {
                console.error('Error loading from student list:', error);
                displayEmptyState();
            }
        }

        // Update header with real data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=4CAF50&color=fff`;
        }

        // Load student's grades
        async function loadMyGrades(studentId) {
            try {
                const response = await fetch(`/api/v1/grade/student/${studentId}`);
                if (response.ok) {
                    const grades = await response.json();
                    allGrades = Array.isArray(grades) ? grades : [];
                    setupClassFilter(allGrades);
                    displayGrades(allGrades);
                } else {
                    console.error('Failed to load grades');
                    displayEmptyState();
                }
            } catch (error) {
                console.error('Error loading grades:', error);
                displayEmptyState();
            }
        }

        // Populate class filter and wire change
        function setupClassFilter(grades){
            const filter = document.getElementById('classFilter');
            if (!filter) return;
            const classKeys = new Map();
            grades.forEach(g => {
                const subject = g.subjectName || 'N/A';
                const section = g.sectionName || 'N/A';
                const key = `${subject} || ${section}`;
                if (!classKeys.has(key)) classKeys.set(key, { subject, section });
            });
            const options = [
                '<option value="">All classes</option>',
                ...Array.from(classKeys.entries()).map(([key, val]) => 
                    `<option value="${key}">${val.subject} — ${val.section}</option>`)
            ];
            filter.innerHTML = options.join('');
            filter.onchange = function(){
                currentFilterKey = this.value || '';
                displayGrades(allGrades);
            };
            document.getElementById('exportExcelBtn')?.addEventListener('click', function(){
                if (!currentStudentId) return;
                window.location.href = `/api/v1/report/student/${currentStudentId}/grades/excel`;
            });
        }

        // Display grouped by class as cards
        function displayGrades(grades) {
            const container = document.getElementById('gradesContainer');
            if (!container) return;

            if (!grades || grades.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Grades Available</h5>
                        <p class="text-muted">You don't have any grades yet. Check back later.</p>
                    </div>`;
                return;
            }

            // Group by Subject + Section
            const groups = new Map();
            grades.forEach(g => {
                const subject = g.subjectName || 'N/A';
                const section = g.sectionName || 'N/A';
                const key = `${subject} || ${section}`;
                if (!groups.has(key)) groups.set(key, { subject, section, items: [] });
                groups.get(key).items.push(g);
            });

            const entries = Array.from(groups.entries())
                .filter(([key]) => !currentFilterKey || key === currentFilterKey)
                .sort((a,b) => a[1].subject.localeCompare(b[1].subject));

            if (entries.length === 0){
                container.innerHTML = '<div class="text-muted">No grades for selected class.</div>';
                return;
            }

            container.innerHTML = entries.map(([key, group]) => {
                const cards = group.items
                    .sort((a,b) => new Date(a.dateGiven || a.createdAt) - new Date(b.dateGiven || b.createdAt))
                    .map(item => {
                        const statusBadge = item.percentage !== null && item.percentage !== undefined ?
                            '<span class="badge bg-success">Graded</span>' :
                            '<span class="badge bg-warning text-dark">Pending</span>';
                        const gradeDisplay = item.percentage !== null && item.percentage !== undefined ?
                            `${item.score}/${item.maxScore} (${item.percentage}%)` : `${item.score}/${item.maxScore}`;
                        const dateDisplay = item.dateGiven ? new Date(item.dateGiven).toLocaleDateString() : new Date(item.createdAt).toLocaleDateString();
                        return `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="fw-semibold">${item.assessmentName}</div>
                                    <small class="text-muted">${item.assessmentType || 'Assessment'} • ${dateDisplay}</small>
                                </div>
                                <div class="text-end">
                                    <div>${gradeDisplay}</div>
                                    ${statusBadge}
                                </div>
                            </li>`;
                    }).join('');
                return `
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header bg-success text-white">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0"><i class="fas fa-book me-2"></i>${group.subject} <span class="text-white-50">(${group.section})</span></h6>
                                    <span class="badge bg-light text-dark">${group.items.length} assessments</span>
                                </div>
                            </div>
                            <ul class="list-group list-group-flush">
                                ${cards}
                            </ul>
                        </div>
                    </div>`;
            }).join('');
        }

        // Display empty state
        function displayEmptyState() {
            const container = document.getElementById('gradesContainer');
            if (!container) return;
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No Grades Available</h5>
                    <p class="text-muted">You don't have any grades yet. Check back later.</p>
                </div>
            `;
        }

        // Set active menu item
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            if (item.getAttribute('href') === window.location.pathname) {
                item.classList.add('active');
            }
            
            item.addEventListener('click', function() {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });
    </script>
</body>
</html>
