@page "/Admin/SectionManage"
@model StudentPeformanceTracker.Pages.Admin.SectionManageModel
@{
    ViewData["Title"] = "Section Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Admin Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            overflow-x: hidden;
        }
        
        
        .dashboard-header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 0;
        }
        
        .card-custom {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            border: none;
        }
        
        .section-title {
            color: var(--secondary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
        }
        
        .table th {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .action-btn {
            padding: 0.25rem 0.5rem;
            margin: 0 0.1rem;
            font-size: 0.875rem;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

    </style>
</head>
<body>
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <div class="main-content" id="mainContent">
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Section Management</h1>
                    <div class="d-flex align-items-center">
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=3498db&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="javascript:void(0)" onclick="handleLogout()"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <main class="container my-4">
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title mb-0">Sections</h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSectionModal">
                        <i class="fas fa-plus me-2"></i>Add New Section
                    </button>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Section Name</th>
                                <th>Course</th>
                                <th>Year Level</th>
                                <th>Semester</th>
                                <th>Capacity</th>
                                <th>Enrolled</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <i class="fas fa-spinner fa-spin fa-2x text-muted mb-2"></i>
                                    <p class="text-muted">Loading sections...</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="text-muted">
                        Showing <span id="showingFrom">0</span> to <span id="showingTo">0</span> of <span id="totalCount">0</span> entries
                    </div>
                    <nav>
                        <ul class="pagination mb-0" id="pagination">
                            <!-- Pagination buttons will be generated here -->
                        </ul>
                    </nav>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Section Modal -->
    <div class="modal fade" id="addSectionModal" tabindex="-1" aria-labelledby="addSectionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addSectionModalLabel">Add New Section</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="sectionForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="sectionName" class="form-label">Section Name *</label>
                                    <input type="text" class="form-control" id="sectionName" required placeholder="e.g., BSIT-1A">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="maxCapacity" class="form-label">Max Capacity *</label>
                                    <input type="number" class="form-control" id="maxCapacity" required min="1" value="40">
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="courseId" class="form-label">Course *</label>
                                    <select class="form-select" id="courseId" required>
                                        <option value="">Select Course</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="yearLevelId" class="form-label">Year Level *</label>
                                    <select class="form-select" id="yearLevelId" required>
                                        <option value="">Select Year Level</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="semesterId" class="form-label">Semester *</label>
                                    <select class="form-select" id="semesterId" required>
                                        <option value="">Select Semester</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createSection()">
                        <i class="fas fa-plus me-2"></i>Add Section
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Manage Section Subjects Modal -->
    <div class="modal fade" id="manageSectionSubjectsModal" tabindex="-1" aria-labelledby="manageSectionSubjectsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="manageSectionSubjectsModalLabel">Manage Section Subjects</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h3 class="section-title mb-0">Current Subjects</h3>
                                <span class="badge bg-primary" id="sectionSubjectCount">Total: 0</span>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped table-hover align-middle">
                                    <thead>
                                        <tr>
                                            <th>Subject</th>
                                            <th>Teacher</th>
                                            <th>Schedule</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="sectionSubjectsTableBody">
                                        <!-- Section subjects will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h3 class="section-title">Add New Subject</h3>
                            <form id="addSectionSubjectForm">
                                <input type="hidden" id="currentSectionId">
                                <div class="mb-3">
                                    <label for="subjectIdForSection" class="form-label">Subject *</label>
                                    <select class="form-select" id="subjectIdForSection" required>
                                        <option value="">Select Subject</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="teacherId" class="form-label">Teacher *</label>
                                    <select class="form-select" id="teacherId" required>
                                        <option value="">Select Teacher</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="schedule" class="form-label">Schedule</label>
                                    <input type="text" class="form-control" id="schedule" placeholder="e.g., MWF 10:00-11:30">
                                </div>
                                <button type="button" class="btn btn-primary" onclick="addSectionSubject()">
                                    <i class="fas fa-plus me-2"></i>Assign Subject
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Pagination variables
        let currentPage = 1;
        const pageSize = 10;
        let totalPages = 0;
        let totalCount = 0;

        document.addEventListener('DOMContentLoaded', function() {
            loadAdminData();
            loadSections();
            loadCourses();
            loadYearLevels();
            loadSemesters();
            loadSubjects();
            loadTeachers();
        });

        async function loadAdminData() {
            try {
                const response = await fetch('/api/v1/admin/profile');
                if (response.ok) {
                    const adminData = await response.json();
                    updateHeader(adminData);
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }

        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=3498db&color=fff`;
        }

        async function loadSections(page = 1) {
            try {
                currentPage = page;
                const response = await fetch(`/api/v1/section?page=${page}&pageSize=${pageSize}`);
                if (response.ok) {
                    const result = await response.json();
                    totalPages = result.totalPages;
                    totalCount = result.totalCount;
                    displaySections(result.data);
                    updatePagination();
                }
            } catch (error) {
                console.error('Error loading sections:', error);
            }
        }

        function displaySections(sections) {
            const tbody = document.querySelector('tbody');
            if (!tbody) return;

            tbody.innerHTML = '';

            if (sections.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No sections found. Add your first section.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            sections.forEach(section => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${section.sectionName}</strong></td>
                    <td>${section.courseName || 'N/A'}</td>
                    <td>${section.yearLevelName || 'N/A'}</td>
                    <td>${section.semesterName || 'N/A'}</td>
                    <td>${section.maxCapacity}</td>
                    <td><span class="badge bg-info">${section.currentCount || 0}</span></td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary action-btn" title="Edit" onclick="editSection(${section.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-info action-btn" title="Manage Subjects" onclick="manageSectionSubjects(${section.id}, '${section.sectionName}')">
                                <i class="fas fa-book"></i>
                            </button>
                            <button class="btn btn-outline-danger action-btn" title="Delete" onclick="deleteSection(${section.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function loadCourses() {
            try {
                const response = await fetch('/api/v1/course?page=1&pageSize=100');
                if (response.ok) {
                    const result = await response.json();
                    const courses = result.data;
                    const select = document.getElementById('courseId');
                    select.innerHTML = '<option value="">Select Course</option>';
                    courses.forEach(course => {
                        const option = document.createElement('option');
                        option.value = course.id;
                        option.textContent = course.courseName;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading courses:', error);
            }
        }

        async function loadYearLevels() {
            try {
                const response = await fetch('/api/v1/yearlevel');
                if (response.ok) {
                    const yearLevels = await response.json();
                    const select = document.getElementById('yearLevelId');
                    select.innerHTML = '<option value="">Select Year Level</option>';
                    yearLevels.forEach(yl => {
                        const option = document.createElement('option');
                        option.value = yl.id;
                        option.textContent = yl.levelName;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading year levels:', error);
            }
        }

        async function loadSemesters() {
            try {
                const response = await fetch('/api/v1/semester');
                if (response.ok) {
                    const semesters = await response.json();
                    const select = document.getElementById('semesterId');
                    select.innerHTML = '<option value="">Select Semester</option>';
                    semesters.forEach(sem => {
                        const option = document.createElement('option');
                        option.value = sem.id;
                        option.textContent = `${sem.semesterName} (${sem.schoolYear})`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading semesters:', error);
            }
        }

        async function loadSubjects() {
            try {
                const response = await fetch('/api/v1/subject?page=1&pageSize=100');
                if (response.ok) {
                    const result = await response.json();
                    const subjects = result.data;
                    const select = document.getElementById('subjectIdForSection');
                    select.innerHTML = '<option value="">Select Subject</option>';
                    subjects.forEach(subject => {
                        const option = document.createElement('option');
                        option.value = subject.id;
                        option.textContent = `${subject.id} - ${subject.subjectName}`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading subjects:', error);
            }
        }

        async function loadTeachers() {
            try {
                const response = await fetch('/api/v1/teacher?page=1&pageSize=100');
                if (response.ok) {
                    const result = await response.json();
                    const teachers = result.data;
                    const select = document.getElementById('teacherId');
                    select.innerHTML = '<option value="">Select Teacher</option>';
                    teachers.forEach(teacher => {
                        const option = document.createElement('option');
                        option.value = teacher.id;
                        option.textContent = `${teacher.firstName} ${teacher.lastName}`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading teachers:', error);
            }
        }

        async function createSection() {
            const sectionName = document.getElementById('sectionName').value;
            const courseId = document.getElementById('courseId').value;
            const yearLevelId = document.getElementById('yearLevelId').value;
            const semesterId = document.getElementById('semesterId').value;
            const maxCapacity = document.getElementById('maxCapacity').value;

            if (!sectionName || !courseId || !yearLevelId || !semesterId || !maxCapacity) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            const sectionData = {
                sectionName,
                courseId: parseInt(courseId),
                yearLevelId: parseInt(yearLevelId),
                semesterId: parseInt(semesterId),
                maxCapacity: parseInt(maxCapacity)
            };

            try {
                const response = await fetch('/api/v1/section', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(sectionData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addSectionModal'));
                    modal.hide();
                    document.getElementById('sectionForm').reset();
                    loadSections();
                    showToast('Section created successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to create section', 'error');
                }
            } catch (error) {
                console.error('Error creating section:', error);
                showToast('Error creating section', 'error');
            }
        }

        async function deleteSection(sectionId) {
            if (confirm('Are you sure you want to delete this section?')) {
                try {
                    const response = await fetch(`/api/v1/section/${sectionId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok || response.status === 204) {
                        loadSections();
                        showToast('Section deleted successfully!', 'success');
                    } else {
                        const error = await response.json();
                        showToast(error.message || 'Failed to delete section', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting section:', error);
                    showToast('Error deleting section', 'error');
                }
            }
        }

        function manageSectionSubjects(sectionId, sectionName) {
            // Navigate to full-page manager (not modal)
            window.location.href = `/Admin/SectionSubjects/${sectionId}`;
        }

        async function populateSectionSubjectOptions(sectionId) {
            try {
                // 1) get section details to know course/year/semester
                const secRes = await fetch(`/api/v1/section/${sectionId}`);
                if (!secRes.ok) return;
                const section = await secRes.json();

                const courseId = section.courseId || section.CourseId;
                const yearLevelId = section.yearLevelId || section.YearLevelId;
                const semesterId = section.semesterId || section.SemesterId;

                // 2) get course subjects for that course/year/semester
                const csRes = await fetch(`/api/v1/coursesubject/course/${courseId}/year/${yearLevelId}/semester/${semesterId}`);
                if (!csRes.ok) return;
                const courseSubjects = await csRes.json();

                // 3) get already assigned subjects in this section to avoid duplicates
                const assignedRes = await fetch(`/api/v1/section/${sectionId}/subjects`);
                const assigned = assignedRes.ok ? await assignedRes.json() : [];
                const assignedIds = new Set(assigned.map(s => s.subjectId || s.SubjectId));

                // 4) populate select with only available subjects (not yet assigned)
                const select = document.getElementById('subjectIdForSection');
                while (select.children.length > 1) select.removeChild(select.lastChild);

                courseSubjects
                    .filter(cs => !assignedIds.has(cs.subjectId))
                    .forEach(cs => {
                        const o = document.createElement('option');
                        o.value = cs.subjectId;
                        o.textContent = `${cs.subjectName} (${cs.semesterName}, ${cs.yearLevelName})`;
                        select.appendChild(o);
                    });

                if (select.children.length === 1) {
                    const o = document.createElement('option');
                    o.disabled = true; o.value = '';
                    o.textContent = 'No available subjects for this year/semester';
                    select.appendChild(o);
                }
            } catch (e) {
                console.error('Error populating section subject options', e);
            }
        }

        async function loadSectionSubjects(sectionId) {
            try {
                const response = await fetch(`/api/v1/section/${sectionId}/subjects`);
                if (response.ok) {
                    const subjects = await response.json();
                    displaySectionSubjects(subjects);
                }
            } catch (error) {
                console.error('Error loading section subjects:', error);
            }
        }

        function displaySectionSubjects(subjects) {
            const tbody = document.getElementById('sectionSubjectsTableBody');
            if (!tbody) return;

            tbody.innerHTML = '';

            if (subjects.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center py-2">No subjects assigned yet.</td>
                    </tr>
                `;
                return;
            }

            subjects.forEach(subject => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${subject.subjectName || 'N/A'}</td>
                    <td>${subject.teacherName || 'Not assigned'}</td>
                    <td>${subject.schedule || 'TBA'}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger" onclick="removeSectionSubject(${subject.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // Update total count badge
            const badge = document.getElementById('sectionSubjectCount');
            if (badge) badge.textContent = `Total: ${subjects.length}`;
        }

        async function addSectionSubject() {
            const sectionId = document.getElementById('currentSectionId').value;
            const subjectId = document.getElementById('subjectIdForSection').value;
            const teacherId = document.getElementById('teacherId').value;
            const schedule = document.getElementById('schedule').value;

            if (!subjectId || !teacherId) {
                showToast('Please select subject and teacher', 'error');
                return;
            }

            const data = {
                sectionId: parseInt(sectionId),
                subjectId: parseInt(subjectId),
                teacherId: parseInt(teacherId),
                schedule
            };

            try {
                const response = await fetch('/api/v1/sectionsubject', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    document.getElementById('addSectionSubjectForm').reset();
                    loadSectionSubjects(sectionId);
                    showToast('Subject assigned successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to assign subject', 'error');
                }
            } catch (error) {
                console.error('Error assigning subject:', error);
                showToast('Error assigning subject', 'error');
            }
        }

        async function removeSectionSubject(sectionSubjectId) {
            if (confirm('Remove this subject from the section?')) {
                try {
                    const response = await fetch(`/api/v1/sectionsubject/${sectionSubjectId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok || response.status === 204) {
                        const sectionId = document.getElementById('currentSectionId').value;
                        loadSectionSubjects(sectionId);
                        showToast('Subject removed successfully!', 'success');
                    } else {
                        const error = await response.json();
                        showToast(error.message || 'Failed to remove subject', 'error');
                    }
                } catch (error) {
                    console.error('Error removing subject:', error);
                    showToast('Error removing subject', 'error');
                }
            }
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }

        function editSection(sectionId) {
            // TODO: Implement edit functionality
            showToast('Edit functionality coming soon', 'info');
        }

        // Pagination functions
        function updatePagination() {
            const showingFrom = totalCount > 0 ? (currentPage - 1) * pageSize + 1 : 0;
            const showingTo = Math.min(currentPage * pageSize, totalCount);
            
            document.getElementById('showingFrom').textContent = showingFrom;
            document.getElementById('showingTo').textContent = showingTo;
            document.getElementById('totalCount').textContent = totalCount;
            
            renderPaginationButtons();
        }

        function renderPaginationButtons() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            
            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage - 1}); return false;">Previous</a>`;
            pagination.appendChild(prevLi);
            
            // Page numbers (show max 5 pages)
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${i}); return false;">${i}</a>`;
                pagination.appendChild(li);
            }
            
            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage + 1}); return false;">Next</a>`;
            pagination.appendChild(nextLi);
        }

        function goToPage(page) {
            if (page < 1 || page > totalPages) return;
            loadSections(page);
        }

        document.getElementById('toggleBtn')?.addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
    </script>
</body>
</html>

