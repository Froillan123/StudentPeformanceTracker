@page "/Admin/UserManage"
@model StudentPeformanceTracker.Pages.Admin.AdminUserManageModel
@{
    ViewData["Title"] = "User Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Admin Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* User Management specific styles only */
        /* No specific styles needed - all common styles are in shared navigation */
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">User Management</h1>
                    <div class="d-flex align-items-center">
                        <div class="search-box me-3">
                            <input type="text" class="form-control" placeholder="Search users...">
                            <i class="fas fa-search"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=3498db&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="javascript:void(0)" onclick="handleLogout()"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- User Filter Section -->
            <div class="card-custom">
                <h3 class="section-title">Filter Users</h3>
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="filterStatus" class="form-label">Filter by Status</label>
                            <select class="form-select" id="filterStatus">
                                <option value="">All Users</option>
                                <option value="Active">Active Users</option>
                                <option value="Inactive">Pending Users</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="filterRole" class="form-label">Filter by Role</label>
                            <select class="form-select" id="filterRole">
                                <option value="">All Roles</option>
                                <option value="Student">Students</option>
                                <option value="Teacher">Teachers</option>
                                <option value="Admin">Admins</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <button type="button" class="btn btn-outline-primary" onclick="filterUsers()">
                                <i class="fas fa-filter me-2"></i>Filter Users
                            </button>
                            <button type="button" class="btn btn-outline-secondary ms-2" onclick="clearFilter()">
                                <i class="fas fa-times me-2"></i>Clear Filter
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User List -->
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title mb-0">User List</h3>
                    <div>
                        <span class="badge bg-primary" id="userCount">Total: 0</span>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Name</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Registration Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="userTableBody">
                            <!-- Users will be loaded here via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- View Details Modal -->
    <div class="modal fade" id="viewDetailsModal" tabindex="-1" aria-labelledby="viewDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewDetailsModalLabel">User Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="userDetailsContent">
                    <!-- User details will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="editUserBtn" style="display: none;">Edit User</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle sidebar functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
        
        // Set active menu item
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            if (item.getAttribute('href') === window.location.pathname) {
                item.classList.add('active');
            }
            
            item.addEventListener('click', function() {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });

        // Load admin data and users on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAdminData();
            loadUsers();
        });

        // Load admin data from API
        async function loadAdminData() {
            try {
                const response = await fetch('/api/v1/admin/profile');
                if (response.ok) {
                    const adminData = await response.json();
                    updateHeader(adminData);
                } else {
                    console.error('Failed to load admin data');
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }

        // Update header with real admin data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=3498db&color=fff`;
        }

        // Load users from API
        async function loadUsers() {
            try {
                // Load users from user-management API (includes all roles with proper status)
                const response = await fetch('/api/v1/user-management/active');

                if (response.ok) {
                    const users = await response.json();
                    displayUsers(users);
                } else {
                    console.error('Failed to load users');
                }
            } catch (error) {
                console.error('Error loading users:', error);
            }
        }

        // Display users in the table
        function displayUsers(users) {
            const tbody = document.getElementById('userTableBody');
            if (!tbody) return;

            // Clear existing rows
            tbody.innerHTML = '';

            if (users.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No users found.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            users.forEach(user => {
                const row = document.createElement('tr');
                const statusBadge = user.status === 'Active' 
                    ? '<span class="badge bg-success">Active</span>' 
                    : '<span class="badge bg-warning">Pending</span>';
                
                const roleBadge = getRoleBadge(user.role);
                const actionButtons = getActionButtons(user);

                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td>${user.firstName} ${user.lastName}</td>
                    <td>${roleBadge}</td>
                    <td>${statusBadge}</td>
                    <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                    <td>${actionButtons}</td>
                `;
                tbody.appendChild(row);
            });

            // Update user count
            const userCount = document.getElementById('userCount');
            if (userCount) {
                userCount.textContent = `Total: ${users.length}`;
            }
        }

        // Get role badge HTML
        function getRoleBadge(role) {
            const badges = {
                'Admin': '<span class="badge bg-danger">Admin</span>',
                'Teacher': '<span class="badge bg-info">Teacher</span>',
                'Student': '<span class="badge bg-primary">Student</span>'
            };
            return badges[role] || '<span class="badge bg-secondary">Unknown</span>';
        }

        // Get action buttons HTML
        function getActionButtons(user) {
            let buttons = '';
            
            if (user.status === 'Inactive') {
                buttons += `
                    <button class="btn btn-outline-success action-btn" title="Activate User" onclick="activateUser(${user.id})">
                        <i class="fas fa-check"></i>
                    </button>
                `;
            } else {
                buttons += `
                    <button class="btn btn-outline-warning action-btn" title="Deactivate User" onclick="deactivateUser(${user.id})">
                        <i class="fas fa-times"></i>
                    </button>
                `;
            }
            
            buttons += `
                <button class="btn btn-outline-primary action-btn" title="View Details" onclick="viewUser(${user.id})">
                    <i class="fas fa-eye"></i>
                </button>
            `;
            
            return `<div class="btn-group btn-group-sm">${buttons}</div>`;
        }

        // Filter users
        async function filterUsers() {
            const status = document.getElementById('filterStatus').value;
            const role = document.getElementById('filterRole').value;
            
            try {
                let url = '/api/v1/user-management/active';
                if (status === 'Inactive') {
                    url = '/api/v1/user-management/pending';
                }
                
                const response = await fetch(url);
                if (response.ok) {
                    let users = await response.json();
                    
                    // Filter by role if specified
                    if (role) {
                        users = users.filter(user => user.role === role);
                    }
                    
                    displayUsers(users);
                } else {
                    console.error('Failed to filter users');
                }
            } catch (error) {
                console.error('Error filtering users:', error);
            }
        }

        // Clear filter
        function clearFilter() {
            document.getElementById('filterStatus').value = '';
            document.getElementById('filterRole').value = '';
            loadUsers();
        }

        // Activate user
        async function activateUser(userId) {
            if (confirm('Are you sure you want to activate this user?')) {
                try {
                    const response = await fetch(`/api/v1/user-management/${userId}/activate`, {
                        method: 'PUT'
                    });
                    
                    if (response.ok) {
                        alert('User activated successfully!');
                        loadUsers(); // Reload the list
                    } else {
                        const error = await response.json();
                        alert(`Failed to activate user: ${error.message}`);
                    }
                } catch (error) {
                    console.error('Error activating user:', error);
                    alert('Error activating user');
                }
            }
        }

        // Deactivate user
        async function deactivateUser(userId) {
            if (confirm('Are you sure you want to deactivate this user?')) {
                try {
                    const response = await fetch(`/api/v1/user-management/${userId}/deactivate`, {
                        method: 'PUT'
                    });
                    
                    if (response.ok) {
                        alert('User deactivated successfully!');
                        loadUsers(); // Reload the list
                    } else {
                        const error = await response.json();
                        alert(`Failed to deactivate user: ${error.message}`);
                    }
                } catch (error) {
                    console.error('Error deactivating user:', error);
                    alert('Error deactivating user');
                }
            }
        }

        // View user details
        async function viewUser(userId) {
            try {
                // Try to get user details from user management API first
                let userDetails = null;
                try {
                    const response = await fetch(`/api/v1/user-management/${userId}`);
                    if (response.ok) {
                        userDetails = await response.json();
                    }
                } catch (error) {
                    console.log('User not found in user management, trying student API...');
                }
                
                // If not found in user management, try student API
                if (!userDetails) {
                    try {
                        const response = await fetch(`/api/v1/student/${userId}`);
                        if (response.ok) {
                            const student = await response.json();
                            userDetails = {
                                id: student.id,
                                username: student.studentId || 'N/A',
                                email: student.email,
                                firstName: student.firstName,
                                lastName: student.lastName,
                                role: 'Student',
                                status: student.status || 'Active',
                                phone: student.phone,
                                studentId: student.studentId,
                                yearLevel: student.yearLevel,
                                courseName: student.courseName
                            };
                        }
                    } catch (error) {
                        console.error('Error fetching student details:', error);
                    }
                }
                
                if (userDetails) {
                    showUserDetailsModal(userDetails);
                } else {
                    alert('User details not found');
                }
            } catch (error) {
                console.error('Error loading user details:', error);
                alert('Error loading user details');
            }
        }
        
        // Show user details in modal
        function showUserDetailsModal(user) {
            const modal = new bootstrap.Modal(document.getElementById('viewDetailsModal'));
            const content = document.getElementById('userDetailsContent');
            
            let detailsHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">Basic Information</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Username/ID:</strong></td>
                                <td>${user.username}</td>
                            </tr>
                            <tr>
                                <td><strong>Name:</strong></td>
                                <td>${user.firstName} ${user.lastName}</td>
                            </tr>
                            <tr>
                                <td><strong>Email:</strong></td>
                                <td>${user.email || 'N/A'}</td>
                            </tr>
                            <tr>
                                <td><strong>Phone:</strong></td>
                                <td>${user.phone || 'N/A'}</td>
                            </tr>
                            <tr>
                                <td><strong>Role:</strong></td>
                                <td>${getRoleBadge(user.role)}</td>
                            </tr>
                            <tr>
                                <td><strong>Status:</strong></td>
                                <td>${user.status === 'Active' ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-warning">Inactive</span>'}</td>
                            </tr>
            `;
            
            // Add student-specific information if it's a student
            if (user.role === 'Student') {
                const yearLevelText = getYearLevelText(user.yearLevel);
                detailsHTML += `
                            <tr>
                                <td><strong>Student ID:</strong></td>
                                <td>${user.studentId || 'N/A'}</td>
                            </tr>
                            <tr>
                                <td><strong>Year Level:</strong></td>
                                <td>${yearLevelText}</td>
                            </tr>
                            <tr>
                                <td><strong>Course:</strong></td>
                                <td>${user.courseName || 'N/A'}</td>
                            </tr>
                `;
            }
            
            detailsHTML += `
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">Account Information</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>User ID:</strong></td>
                                <td>${user.id}</td>
                            </tr>
                            <tr>
                                <td><strong>Registration Date:</strong></td>
                                <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                            </tr>
                            <tr>
                                <td><strong>Last Updated:</strong></td>
                                <td>${user.updatedAt ? new Date(user.updatedAt).toLocaleDateString() : 'N/A'}</td>
                            </tr>
                        </table>
                    </div>
                </div>
            `;
            
            content.innerHTML = detailsHTML;
            modal.show();
        }
        
        // Get year level text (helper function for modal)
        function getYearLevelText(yearLevel) {
            const yearTexts = {
                1: '1st Year',
                2: '2nd Year', 
                3: '3rd Year',
                4: '4th Year',
                5: '5th Year'
            };
            return yearTexts[yearLevel] || 'N/A';
        }
    </script>
</body>
</html>
