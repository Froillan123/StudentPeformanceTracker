@page "/Admin/DepartmentManage"
@model StudentPeformanceTracker.Pages.Admin.AdminDepartmentManageModel
@{
    ViewData["Title"] = "Department Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Admin Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            overflow-x: hidden;
        }
        
        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: var(--sidebar-width);
            background-color: var(--secondary-color);
            color: white;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        
        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }
        
        .sidebar-header {
            padding: 1.5rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            text-align: center;
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar.collapsed .sidebar-header h3 {
            display: none;
        }
        
        .sidebar-menu {
            padding: 1rem 0;
        }
        
        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }
        
        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: rgba(255,255,255,0.1);
            color: white;
            border-left: 4px solid var(--primary-color);
        }
        
        .sidebar-menu i {
            width: 24px;
            margin-right: 1rem;
            text-align: center;
        }
        
        .sidebar.collapsed .sidebar-menu span {
            display: none;
        }
        
        .sidebar.collapsed .sidebar-menu i {
            margin-right: 0;
        }
        
        .toggle-btn {
            position: absolute;
            top: 1rem;
            right: -15px;
            background-color: var(--secondary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        /* Main Content Area */
        .main-content {
            margin-left: var(--sidebar-width);
            transition: all 0.3s ease;
            min-height: 100vh;
            background-color: #f8f9fa;
        }
        
        .main-content.expanded {
            margin-left: var(--sidebar-collapsed-width);
        }
        
        .dashboard-header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 0;
        }
        
        .card-custom {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            border: none;
        }
        
        .card-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .section-title {
            color: var(--secondary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
        }
        
        .table th {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .action-btn {
            padding: 0.25rem 0.5rem;
            margin: 0 0.1rem;
            font-size: 0.875rem;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .search-box {
            position: relative;
        }
        
        .search-box input {
            padding-right: 2.5rem;
        }
        
        .search-box i {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        
        /* Modal Styles */
        .modal-header {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Department Management</h1>
                    <div class="d-flex align-items-center">
                        <div class="search-box me-3">
                            <input type="text" class="form-control" placeholder="Search departments..." id="searchInput">
                            <i class="fas fa-search"></i>
                        </div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addDepartmentModal">
                            <i class="fas fa-plus me-2"></i>Add Department
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Departments Table -->
            <div class="card-custom">
                <h3 class="section-title">Departments</h3>
                <div class="table-responsive">
                    <table class="table table-hover" id="departmentsTable">
                        <thead>
                            <tr>
                                <th>Department Name</th>
                                <th>Code</th>
                                <th>Head of Department</th>
                                <th>Teachers</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="departmentsTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Department Modal -->
    <div class="modal fade" id="addDepartmentModal" tabindex="-1" aria-labelledby="addDepartmentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addDepartmentModalLabel">Add New Department</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addDepartmentForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="departmentName" class="form-label">Department Name *</label>
                                <input type="text" class="form-control" id="departmentName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="departmentCode" class="form-label">Department Code</label>
                                <input type="text" class="form-control" id="departmentCode" placeholder="e.g., CS, MATH">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="headOfDepartment" class="form-label">Head of Department</label>
                            <input type="text" class="form-control" id="headOfDepartment">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveDepartmentBtn">Save Department</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Department Modal -->
    <div class="modal fade" id="editDepartmentModal" tabindex="-1" aria-labelledby="editDepartmentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editDepartmentModalLabel">Edit Department</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editDepartmentForm">
                        <input type="hidden" id="editDepartmentId">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editDepartmentName" class="form-label">Department Name *</label>
                                <input type="text" class="form-control" id="editDepartmentName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editDepartmentCode" class="form-label">Department Code</label>
                                <input type="text" class="form-control" id="editDepartmentCode">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editHeadOfDepartment" class="form-label">Head of Department</label>
                            <input type="text" class="form-control" id="editHeadOfDepartment">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="updateDepartmentBtn">Update Department</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Department Modal -->
    <div class="modal fade" id="deleteDepartmentModal" tabindex="-1" aria-labelledby="deleteDepartmentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteDepartmentModalLabel">Delete Department</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this department?</p>
                    <p class="text-danger"><strong>This action cannot be undone.</strong></p>
                    <input type="hidden" id="deleteDepartmentId">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteDepartmentBtn">Delete Department</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Load departments on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadDepartments();
        });

        // Load departments from API
        async function loadDepartments() {
            try {
                const response = await fetch('/api/v1/department');
                if (response.ok) {
                    const departments = await response.json();
                    displayDepartments(departments);
                } else {
                    console.error('Failed to load departments');
                }
            } catch (error) {
                console.error('Error loading departments:', error);
            }
        }

        // Display departments in table
        function displayDepartments(departments) {
            const tbody = document.getElementById('departmentsTableBody');
            tbody.innerHTML = '';

            departments.forEach(dept => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${dept.departmentName}</td>
                    <td>${dept.departmentCode || '-'}</td>
                    <td>${dept.headOfDepartment || '-'}</td>
                    <td>${dept.teachersCount || 0}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary action-btn" onclick="editDepartment(${dept.id})" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger action-btn" onclick="deleteDepartment(${dept.id})" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Add department
        document.getElementById('saveDepartmentBtn').addEventListener('click', async function() {
            const departmentData = {
                departmentName: document.getElementById('departmentName').value,
                departmentCode: document.getElementById('departmentCode').value,
                description: document.getElementById('description').value,
                headOfDepartment: document.getElementById('headOfDepartment').value
            };

            try {
                const response = await fetch('/api/v1/department', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(departmentData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addDepartmentModal'));
                    modal.hide();
                    document.getElementById('addDepartmentForm').reset();
                    loadDepartments();
                    showToast('Department added successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to add department', 'error');
                }
            } catch (error) {
                console.error('Error adding department:', error);
                showToast('Error adding department', 'error');
            }
        });

        // Edit department
        function editDepartment(id) {
            // Load department data and populate edit form
            fetch(`/api/v1/department/${id}`)
                .then(response => response.json())
                .then(department => {
                    document.getElementById('editDepartmentId').value = department.id;
                    document.getElementById('editDepartmentName').value = department.departmentName;
                    document.getElementById('editDepartmentCode').value = department.departmentCode || '';
                    document.getElementById('editDescription').value = department.description || '';
                    document.getElementById('editHeadOfDepartment').value = department.headOfDepartment || '';
                    
                    const modal = new bootstrap.Modal(document.getElementById('editDepartmentModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error loading department:', error);
                    showToast('Error loading department', 'error');
                });
        }

        // Update department
        document.getElementById('updateDepartmentBtn').addEventListener('click', async function() {
            const id = document.getElementById('editDepartmentId').value;
            const departmentData = {
                id: parseInt(id),
                departmentName: document.getElementById('editDepartmentName').value,
                departmentCode: document.getElementById('editDepartmentCode').value,
                description: document.getElementById('editDescription').value,
                headOfDepartment: document.getElementById('editHeadOfDepartment').value
            };

            try {
                const response = await fetch(`/api/v1/department/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(departmentData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editDepartmentModal'));
                    modal.hide();
                    loadDepartments();
                    showToast('Department updated successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to update department', 'error');
                }
            } catch (error) {
                console.error('Error updating department:', error);
                showToast('Error updating department', 'error');
            }
        });

        // Delete department
        function deleteDepartment(id) {
            document.getElementById('deleteDepartmentId').value = id;
            const modal = new bootstrap.Modal(document.getElementById('deleteDepartmentModal'));
            modal.show();
        }

        // Confirm delete department
        document.getElementById('confirmDeleteDepartmentBtn').addEventListener('click', async function() {
            const id = document.getElementById('deleteDepartmentId').value;

            try {
                const response = await fetch(`/api/v1/department/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteDepartmentModal'));
                    modal.hide();
                    loadDepartments();
                    showToast('Department deleted successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to delete department', 'error');
                }
            } catch (error) {
                console.error('Error deleting department:', error);
                showToast('Error deleting department', 'error');
            }
        });

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('#departmentsTableBody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });

        // Show toast notification
        function showToast(message, type = 'info') {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            // Add to page
            document.body.appendChild(toast);
            
            // Initialize and show toast
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
    </script>
</body>
</html>
