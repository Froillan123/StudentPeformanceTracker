@page "/Admin/Dashboard"
@model StudentPeformanceTracker.Pages.Admin.AdminDashboardModel
@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Student Performance Tracker</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Chart.js for analytics -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            overflow-x: hidden;
        }
        
        /* Widen main container a bit for better grid breathing room */
        .main-content .container { max-width: 1320px; }
        
        
        .dashboard-header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 0;
        }
        
        .card-custom {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            border: none;
        }
        
        .card-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .section-title {
            color: var(--secondary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
        }
        
        .stat-card {
            text-align: center;
            padding: 1.5rem;
            border-radius: 8px;
            color: white;
            margin-bottom: 1.5rem;
        }
        
        .stat-card.primary {
            background-color: var(--primary-color);
        }
        
        .stat-card.success {
            background-color: var(--success-color);
        }
        
        .stat-card.warning {
            background-color: var(--warning-color);
        }
        
        .stat-card.danger {
            background-color: var(--danger-color);
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            display: block;
            line-height: 1;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .stat-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            opacity: 0.8;
        }
        
        .table th {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .badge-custom {
            background-color: var(--primary-color);
            color: white;
        }
        
        .nav-tabs .nav-link.active {
            border-bottom: 3px solid var(--primary-color);
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .tab-content {
            padding-top: 1.5rem;
        }
        
        .action-btn {
            padding: 0.25rem 0.5rem;
            margin: 0 0.1rem;
            font-size: 0.875rem;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .quick-action-card {
            text-align: center;
            padding: 1.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .quick-action-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .quick-action-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
        }
        
        .search-box {
            position: relative;
        }
        
        .search-box input {
            padding-right: 2.5rem;
        }
        
        .search-box i {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        
        /* Modal Styles */
        .modal-header {
            background-color: var(--secondary-color);
            color: white;
        }
        
        /* Toast notification */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1055;
        }
        
        .toast {
            background-color: white;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Admin Dashboard</h1>
                    <div class="d-flex align-items-center">
                        <div class="search-box me-3">
                            <input type="text" class="form-control" placeholder="Search...">
                            <i class="fas fa-search"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=3498db&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="javascript:void(0)" onclick="handleLogout()"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Quick Stats -->
            <div class="row g-4">
                <div class="col-12 col-sm-6 col-xl-3">
                    <div class="stat-card primary">
                        <i class="fas fa-user-graduate stat-icon"></i>
                        <span class="stat-number" id="totalStudents">
                            <i class="fas fa-spinner fa-spin"></i>
                        </span>
                        <span class="stat-label">Total Students</span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-xl-3">
                    <div class="stat-card success">
                        <i class="fas fa-chalkboard-teacher stat-icon"></i>
                        <span class="stat-number" id="totalTeachers">
                            <i class="fas fa-spinner fa-spin"></i>
                        </span>
                        <span class="stat-label">Total Teachers</span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-xl-3">
                    <div class="stat-card warning">
                        <i class="fas fa-book stat-icon"></i>
                        <span class="stat-number" id="activeCourses">
                            <i class="fas fa-spinner fa-spin"></i>
                        </span>
                        <span class="stat-label">Active Courses</span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-xl-3">
                    <div class="stat-card danger">
                        <i class="fas fa-exclamation-triangle stat-icon"></i>
                        <span class="stat-number" id="pendingIssues">
                            <i class="fas fa-spinner fa-spin"></i>
                        </span>
                        <span class="stat-label">Pending Issues</span>
                    </div>
                </div>
            </div>

            

            <div class="row g-4 mt-1">
                <div class="col-12">
                    <div class="card-custom mb-0">
                        <h3 class="section-title">Performance Analytics</h3>
                        <div class="chart-container">
                            <canvas id="performanceChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-4 mt-1">
                <div class="col-12">
                    <div class="card-custom mb-0">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3 class="section-title mb-0">Student Management</h3>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm table-hover align-middle">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Grade</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="studentManagementTableBody">
                                    <tr>
                                        <td colspan="3" class="text-center text-muted py-3">
                                            <i class="fas fa-user-graduate fa-2x mb-2 d-block"></i>
                                            No students to display
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="text-end">
                            <a href="/Admin/StudentManage" class="btn btn-sm btn-outline-primary">View All Students</a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-4 mt-1">
                <div class="col-12">
                    <div class="card-custom mb-0">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3 class="section-title mb-0">Teacher Management</h3>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm table-hover align-middle">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Subject</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="teacherManagementTableBody">
                                    <tr>
                                        <td colspan="3" class="text-center text-muted py-3">
                                            <i class="fas fa-spinner fa-spin fa-2x mb-2 d-block"></i>
                                            Loading teachers...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="text-end">
                            <a href="#" class="btn btn-sm btn-outline-primary">View All Teachers</a>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Student Modal -->
    <div class="modal fade" id="addStudentModal" tabindex="-1" aria-labelledby="addStudentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addStudentModalLabel">Add New Student</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addStudentForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="studentFirstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="studentFirstName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="studentLastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="studentLastName" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="studentEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="studentEmail" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="studentGrade" class="form-label">Grade Level</label>
                                <select class="form-select" id="studentGrade" required>
                                    <option value="">Select Grade</option>
                                    <option value="7">Grade 7</option>
                                    <option value="8">Grade 8</option>
                                    <option value="9">Grade 9</option>
                                    <option value="10">Grade 10</option>
                                    <option value="11">Grade 11</option>
                                    <option value="12">Grade 12</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="studentAddress" class="form-label">Address</label>
                            <textarea class="form-control" id="studentAddress" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="studentParent" class="form-label">Parent/Guardian Name</label>
                            <input type="text" class="form-control" id="studentParent">
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="studentParentPhone" class="form-label">Parent Phone</label>
                                <input type="tel" class="form-control" id="studentParentPhone">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="studentStatus" class="form-label">Status</label>
                                <select class="form-select" id="studentStatus" required>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                    <option value="suspended">Suspended</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveStudentBtn">Save Student</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Teacher Modal -->
    <div class="modal fade" id="addTeacherModal" tabindex="-1" aria-labelledby="addTeacherModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addTeacherModalLabel">Add New Teacher</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addTeacherForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="teacherFirstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="teacherFirstName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="teacherLastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="teacherLastName" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="teacherEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="teacherEmail" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="teacherPhone" class="form-label">Phone</label>
                                <input type="tel" class="form-control" id="teacherPhone">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="teacherSubject" class="form-label">Primary Subject</label>
                                <select class="form-select" id="teacherSubject" required>
                                    <option value="">Select Subject</option>
                                    <option value="math">Mathematics</option>
                                    <option value="science">Science</option>
                                    <option value="english">English</option>
                                    <option value="history">History</option>
                                    <option value="art">Art</option>
                                    <option value="pe">Physical Education</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="teacherGradeLevel" class="form-label">Grade Levels</label>
                                <select class="form-select" id="teacherGradeLevel" multiple>
                                    <option value="7">Grade 7</option>
                                    <option value="8">Grade 8</option>
                                    <option value="9">Grade 9</option>
                                    <option value="10">Grade 10</option>
                                    <option value="11">Grade 11</option>
                                    <option value="12">Grade 12</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="teacherAddress" class="form-label">Address</label>
                            <textarea class="form-control" id="teacherAddress" rows="2"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="teacherStatus" class="form-label">Status</label>
                                <select class="form-select" id="teacherStatus" required>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                    <option value="on_leave">On Leave</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="teacherJoinDate" class="form-label">Join Date</label>
                                <input type="date" class="form-control" id="teacherJoinDate">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveTeacherBtn">Save Teacher</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast container for notifications -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Pagination variables
        let currentPage = 1;
        const pageSize = 10;
        let totalPages = 0;
        let totalCount = 0;

        // Load admin data on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAdminData();
            loadDashboardStats();
            loadStudentManagement();
            loadTeacherManagement();
        });

        // Load admin data from API
        async function loadAdminData() {
            try {
                const response = await fetch('/api/v1/admin/profile');
                if (response.ok) {
                    const adminData = await response.json();
                    updateHeader(adminData);
                } else {
                    console.error('Failed to load admin data');
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }

        // Update header with real admin data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=3498db&color=fff`;
        }

        // Load dashboard statistics from API
        async function loadDashboardStats() {
            try {
                // Load all stats in parallel
                const [studentsResponse, teachersResponse, coursesResponse] = await Promise.all([
                    fetch('/api/v1/student?page=1&pageSize=1'),
                    fetch('/api/v1/teacher?page=1&pageSize=1'),
                    fetch('/api/v1/course?page=1&pageSize=1')
                ]);

                // Update each stat card
                await updateStatCard('totalStudents', studentsResponse, 'students');
                await updateStatCard('totalTeachers', teachersResponse, 'teachers');
                await updateStatCard('activeCourses', coursesResponse, 'courses');
                
                // For pending issues, we'll calculate based on inactive users or other criteria
                await updatePendingIssues();
                
            } catch (error) {
                console.error('Error loading dashboard statistics:', error);
                // Show error state
                showErrorState();
            }
        }

        // Update individual stat card
        async function updateStatCard(elementId, response, type) {
            const element = document.getElementById(elementId);
            if (!element) return;

            try {
                if (response.ok) {
                    const result = await response.json();
                    const count = result.totalCount || 0;
                    element.innerHTML = count.toLocaleString();
                } else {
                    element.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
                }
            } catch (error) {
                console.error(`Error loading ${type}:`, error);
                element.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
            }
        }

        // Update pending issues (calculate based on inactive users, etc.)
        async function updatePendingIssues() {
            const element = document.getElementById('pendingIssues');
            if (!element) return;

            try {
                // Get inactive students and teachers
                const [studentsResponse, teachersResponse] = await Promise.all([
                    fetch('/api/v1/student?page=1&pageSize=100'),
                    fetch('/api/v1/teacher?page=1&pageSize=100')
                ]);

                let pendingCount = 0;

                if (studentsResponse.ok) {
                    const result = await studentsResponse.json();
                    const students = result.data;
                    // Count students with issues (you can define your criteria)
                    pendingCount += students.filter(s => s.status === 'inactive' || s.status === 'suspended').length;
                }

                if (teachersResponse.ok) {
                    const result = await teachersResponse.json();
                    const teachers = result.data;
                    // Count teachers with issues
                    pendingCount += teachers.filter(t => t.status === 'inactive' || t.status === 'on_leave').length;
                }

                element.innerHTML = pendingCount.toLocaleString();
            } catch (error) {
                console.error('Error loading pending issues:', error);
                element.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
            }
        }

        // Show error state for all stats
        function showErrorState() {
            const statElements = ['totalStudents', 'totalTeachers', 'activeCourses', 'pendingIssues'];
            statElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
                }
            });
        }

        // Load student management data
        async function loadStudentManagement(page = 1) {
            try {
                currentPage = page;
                const response = await fetch(`/api/v1/student?page=${page}&pageSize=${pageSize}`);
                if (response.ok) {
                    const result = await response.json();
                    totalPages = result.totalPages;
                    totalCount = result.totalCount;
                    displayStudentManagement(result.data.slice(0, 5)); // Show only first 5
                    updatePagination();
                } else {
                    console.error('Failed to load students');
                }
            } catch (error) {
                console.error('Error loading students:', error);
            }
        }

        // Display student management data
        function displayStudentManagement(students) {
            const tbody = document.getElementById('studentManagementTableBody');
            if (!tbody) return;

            tbody.innerHTML = '';

            if (students.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="3" class="text-center text-muted py-3">
                            <i class="fas fa-user-graduate fa-2x mb-2 d-block"></i>
                            No students to display
                        </td>
                    </tr>
                `;
                return;
            }

            students.forEach(student => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${student.firstName} ${student.lastName}</td>
                    <td>${student.yearLevel || 'N/A'}</td>
                    <td><span class="badge ${student.status === 'active' ? 'bg-success' : 'bg-warning'}">${student.status || 'Active'}</span></td>
                `;
                tbody.appendChild(row);
            });
        }

        // Load teacher management data
        async function loadTeacherManagement() {
            try {
                const response = await fetch('/api/v1/teacher?page=1&pageSize=10');
                if (response.ok) {
                    const result = await response.json();
                    displayTeacherManagement(result.data.slice(0, 4)); // Show only first 4
                } else {
                    console.error('Failed to load teachers');
                }
            } catch (error) {
                console.error('Error loading teachers:', error);
            }
        }

        // Display teacher management data
        function displayTeacherManagement(teachers) {
            const tbody = document.getElementById('teacherManagementTableBody');
            if (!tbody) return;

            tbody.innerHTML = '';

            if (teachers.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center text-muted py-3">
                            <i class="fas fa-chalkboard-teacher fa-2x mb-2 d-block"></i>
                            No teachers to display
                        </td>
                    </tr>
                `;
                return;
            }

            teachers.forEach(teacher => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${teacher.firstName} ${teacher.lastName}</td>
                    <td>${teacher.highestQualification || 'N/A'}</td>
                    <td><span class="badge ${teacher.status === 'active' ? 'bg-success' : teacher.status === 'on_leave' ? 'bg-warning' : 'bg-secondary'}">${teacher.status || 'Active'}</span></td>
                `;
                tbody.appendChild(row);
            });
        }

        // Action functions for student and teacher management
        function editStudent(studentId) {
            showToast(`Edit student ${studentId}`, 'info');
        }

        function deleteStudent(studentId) {
            if (confirm('Are you sure you want to delete this student?')) {
                showToast(`Delete student ${studentId}`, 'info');
            }
        }

        function editTeacher(teacherId) {
            showToast(`Edit teacher ${teacherId}`, 'info');
        }

        function deleteTeacher(teacherId) {
            if (confirm('Are you sure you want to delete this teacher?')) {
                showToast(`Delete teacher ${teacherId}`, 'info');
            }
        }

        // Additional page-specific JavaScript can go here

        // Initialize performance chart
        const performanceCtx = document.getElementById('performanceChart').getContext('2d');
        const performanceChart = new Chart(performanceCtx, {
            type: 'bar',
            data: {
                labels: ['Mathematics', 'Science', 'English', 'History', 'Art', 'PE'],
                datasets: [{
                    label: 'Average Grade',
                    data: [85, 78, 92, 75, 88, 90],
                    backgroundColor: [
                        'rgba(52, 152, 219, 0.7)',
                        'rgba(46, 204, 113, 0.7)',
                        'rgba(155, 89, 182, 0.7)',
                        'rgba(241, 196, 15, 0.7)',
                        'rgba(230, 126, 34, 0.7)',
                        'rgba(231, 76, 60, 0.7)'
                    ],
                    borderColor: [
                        'rgb(52, 152, 219)',
                        'rgb(46, 204, 113)',
                        'rgb(155, 89, 182)',
                        'rgb(241, 196, 15)',
                        'rgb(230, 126, 34)',
                        'rgb(231, 76, 60)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        title: {
                            display: true,
                            text: 'Average Grade (%)'
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Subject Performance Overview'
                    }
                }
            }
        });

        // Save Student functionality
        document.getElementById('saveStudentBtn').addEventListener('click', function() {
            // In a real application, you would submit the form data to a server
            // For this demo, we'll just show a success message
            showToast('Student added successfully!', 'success');
            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addStudentModal'));
            modal.hide();
            // Reset the form
            document.getElementById('addStudentForm').reset();
        });

        // Save Teacher functionality
        document.getElementById('saveTeacherBtn').addEventListener('click', function() {
            // In a real application, you would submit the form data to a server
            // For this demo, we'll just show a success message
            showToast('Teacher added successfully!', 'success');
            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addTeacherModal'));
            modal.hide();
            // Reset the form
            document.getElementById('addTeacherForm').reset();
        });

        // Show toast notification
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toastContainer');
            const toastId = 'toast-' + Date.now();
            
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.id = toastId;
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // Initialize and show the toast
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();
            
            // Remove toast from DOM after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Pagination functions
        function updatePagination() {
            const showingFrom = totalCount > 0 ? (currentPage - 1) * pageSize + 1 : 0;
            const showingTo = Math.min(currentPage * pageSize, totalCount);
            
            document.getElementById('showingFrom').textContent = showingFrom;
            document.getElementById('showingTo').textContent = showingTo;
            document.getElementById('totalCount').textContent = totalCount;
            
            renderPaginationButtons();
        }

        function renderPaginationButtons() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            
            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage - 1}); return false;">Previous</a>`;
            pagination.appendChild(prevLi);
            
            // Page numbers (show max 5 pages)
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${i}); return false;">${i}</a>`;
                pagination.appendChild(li);
            }
            
            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage + 1}); return false;">Next</a>`;
            pagination.appendChild(nextLi);
        }

        function goToPage(page) {
            if (page < 1 || page > totalPages) return;
            loadStudentManagement(page);
        }

        
    </script>
</body>
</html>
