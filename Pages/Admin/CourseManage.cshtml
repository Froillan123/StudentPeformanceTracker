@page "/Admin/CourseManage"
@model StudentPeformanceTracker.Pages.Admin.AdminCourseManageModel
@{
    ViewData["Title"] = "Course Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Admin Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            overflow-x: hidden;
        }
        
        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: var(--sidebar-width);
            background-color: var(--secondary-color);
            color: white;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        
        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }
        
        .sidebar-header {
            padding: 1.5rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            text-align: center;
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar.collapsed .sidebar-header h3 {
            display: none;
        }
        
        .sidebar-menu {
            padding: 1rem 0;
        }
        
        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }
        
        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: rgba(255,255,255,0.1);
            color: white;
            border-left: 4px solid var(--primary-color);
        }
        
        .sidebar-menu i {
            width: 24px;
            margin-right: 1rem;
            text-align: center;
        }
        
        .sidebar.collapsed .sidebar-menu span {
            display: none;
        }
        
        .sidebar.collapsed .sidebar-menu i {
            margin-right: 0;
        }
        
        .toggle-btn {
            position: absolute;
            top: 1rem;
            right: -15px;
            background-color: var(--secondary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        /* Main Content Area */
        .main-content {
            margin-left: var(--sidebar-width);
            transition: all 0.3s ease;
            min-height: 100vh;
            background-color: #f8f9fa;
        }
        
        .main-content.expanded {
            margin-left: var(--sidebar-collapsed-width);
        }
        
        .dashboard-header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 0;
        }
        
        .card-custom {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            border: none;
        }
        
        .section-title {
            color: var(--secondary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
        }
        
        .table th {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .action-btn {
            padding: 0.25rem 0.5rem;
            margin: 0 0.1rem;
            font-size: 0.875rem;
        }
        
        .search-box {
            position: relative;
        }
        
        .search-box input {
            padding-right: 2.5rem;
        }
        
        .search-box i {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .demo-notice {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .course-code {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: var(--primary-color);
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Course Management</h1>
                    <div class="d-flex align-items-center">
                        <div class="search-box me-3">
                            <input type="text" class="form-control" placeholder="Search courses...">
                            <i class="fas fa-search"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=3498db&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="javascript:void(0)" onclick="handleLogout()"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Department Filter Section -->
            <div class="card-custom">
                <h3 class="section-title">Filter Courses</h3>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="filterDepartment" class="form-label">Filter by Department</label>
                            <select class="form-select" id="filterDepartment">
                                <option value="">All Departments</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <button type="button" class="btn btn-outline-primary" onclick="filterCourses()">
                                <i class="fas fa-filter me-2"></i>Filter Courses
                            </button>
                            <button type="button" class="btn btn-outline-secondary ms-2" onclick="clearFilter()">
                                <i class="fas fa-times me-2"></i>Clear Filter
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add Course Button -->
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center">
                    <h3 class="section-title mb-0">Course Management</h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCourseModal">
                        <i class="fas fa-plus me-2"></i>Add New Course
                    </button>
                </div>
            </div>

            <!-- Courses List -->
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title mb-0">Course List</h3>
                    <div>
                        <span class="badge bg-primary">Total: 0</span>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Course Name</th>
                                <th>Description</th>
                                <th>Department</th>
                                <th>Subjects</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Empty table for demo -->
                            <tr>
                                <td colspan="5" class="text-center py-4">
                                    <i class="fas fa-book fa-3x text-muted mb-3"></i>
                                    <p class="text-muted">No courses found. Add your first course using the form above.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Course Modal -->
    <div class="modal fade" id="addCourseModal" tabindex="-1" aria-labelledby="addCourseModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCourseModalLabel">Add New Course</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="courseForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="courseName" class="form-label">Course Name *</label>
                                    <input type="text" class="form-control" id="courseName" name="courseName" placeholder="e.g., Bachelor of Science in Computer Science" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="departmentId" class="form-label">Department *</label>
                                    <select class="form-select" id="departmentId" name="departmentId" required>
                                        <option value="">Select Department</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Enter course description..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createCourse()">
                        <i class="fas fa-plus me-2"></i>Add Course
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Course Subjects Management Modal -->
    <div class="modal fade" id="courseSubjectsModal" tabindex="-1" aria-labelledby="courseSubjectsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="courseSubjectsModalLabel">Manage Course Subjects</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="fw-bold mb-3">Current Subjects</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Subject</th>
                                            <th>Units</th>
                                            <th>Year</th>
                                            <th>Semester</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="courseSubjectsTableBody">
                                        <!-- Course subjects will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6 class="fw-bold mb-3">Add New Subject</h6>
                            <form id="addCourseSubjectForm">
                                <input type="hidden" id="courseSubjectsCourseId">
                                <div class="mb-3">
                                    <label for="subjectSelect" class="form-label">Select Subject</label>
                                    <select class="form-select" id="subjectSelect" required>
                                        <option value="">Choose a subject...</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="yearLevelSelect" class="form-label">Year Level</label>
                                    <select class="form-select" id="yearLevelSelect" required>
                                        <option value="">Select year level...</option>
                                        <option value="1">1st Year</option>
                                        <option value="2">2nd Year</option>
                                        <option value="3">3rd Year</option>
                                        <option value="4">4th Year</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="semesterSelect" class="form-label">Semester</label>
                                    <select class="form-select" id="semesterSelect" required>
                                        <option value="">Select semester...</option>
                                        <option value="1">1st Semester</option>
                                        <option value="2">2nd Semester</option>
                                        <option value="3">Summer</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="isRequired" checked>
                                        <label class="form-check-label" for="isRequired">
                                            Required Subject
                                        </label>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-primary" onclick="addCourseSubject()">
                                    <i class="fas fa-plus me-2"></i>Add Subject
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle sidebar functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
        
        // Set active menu item
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            if (item.getAttribute('href') === window.location.pathname) {
                item.classList.add('active');
            }
            
            item.addEventListener('click', function() {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });

        // Load admin data, departments, courses, subjects, and year levels on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAdminData();
            loadDepartments();
            loadCourses();
            loadSubjects();
            loadYearLevels();
        });

        // Load admin data from API
        async function loadAdminData() {
            try {
                const response = await fetch('/api/v1/admin/profile');
                if (response.ok) {
                    const adminData = await response.json();
                    updateHeader(adminData);
                } else {
                    console.error('Failed to load admin data');
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }

        // Update header with real admin data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=3498db&color=fff`;
        }

        // Load departments from API
        async function loadDepartments() {
            try {
                const response = await fetch('/api/v1/department');
                if (response.ok) {
                    const departments = await response.json();
                    const departmentSelects = document.querySelectorAll('#departmentId, #filterDepartment, #editDepartmentId');
                    
                    departmentSelects.forEach(select => {
                        // Clear existing options except the first one
                        while (select.children.length > 1) {
                            select.removeChild(select.lastChild);
                        }
                        
                        departments.forEach(dept => {
                            const option = document.createElement('option');
                            option.value = dept.id;
                            option.textContent = dept.departmentName;
                            select.appendChild(option);
                        });
                    });
                } else {
                    console.error('Failed to load departments');
                }
            } catch (error) {
                console.error('Error loading departments:', error);
            }
        }

        // Load courses from API
        async function loadCourses() {
            try {
                const response = await fetch('/api/v1/course');
                if (response.ok) {
                    const courses = await response.json();
                    displayCourses(courses);
                } else {
                    console.error('Failed to load courses');
                }
            } catch (error) {
                console.error('Error loading courses:', error);
            }
        }

        // Load subjects from API
        async function loadSubjects() {
            try {
                const response = await fetch('/api/v1/subject');
                if (response.ok) {
                    const subjects = await response.json();
                    console.log('Subjects loaded:', subjects);
                    populateSubjectDropdown(subjects);
                } else {
                    console.error('Failed to load subjects');
                }
            } catch (error) {
                console.error('Error loading subjects:', error);
            }
        }

        // Load subject count for a specific course
        async function loadSubjectCount(courseId) {
            try {
                const response = await fetch(`/api/v1/subject?courseId=${courseId}`);
                if (response.ok) {
                    const subjects = await response.json();
                    const count = subjects.length;
                    const badge = document.getElementById(`subjectCount-${courseId}`);
                    if (badge) {
                        badge.textContent = `${count} subjects`;
                        badge.className = count > 0 ? 'badge bg-success' : 'badge bg-info';
                    }
                } else {
                    const badge = document.getElementById(`subjectCount-${courseId}`);
                    if (badge) {
                        badge.textContent = '0 subjects';
                        badge.className = 'badge bg-info';
                    }
                }
            } catch (error) {
                console.error('Error loading subject count:', error);
                const badge = document.getElementById(`subjectCount-${courseId}`);
                if (badge) {
                    badge.textContent = '0 subjects';
                    badge.className = 'badge bg-info';
                }
            }
        }

        // Load year levels from API
        async function loadYearLevels() {
            try {
                const response = await fetch('/api/v1/yearlevel');
                if (response.ok) {
                    const yearLevels = await response.json();
                    console.log('Year levels loaded:', yearLevels);
                    populateYearLevelDropdown(yearLevels);
                } else {
                    console.error('Failed to load year levels');
                }
            } catch (error) {
                console.error('Error loading year levels:', error);
            }
        }

        // Populate year level dropdown
        function populateYearLevelDropdown(yearLevels) {
            const yearLevelSelect = document.getElementById('yearLevelSelect');
            if (!yearLevelSelect) return;

            // Clear existing options except the first one
            while (yearLevelSelect.children.length > 1) {
                yearLevelSelect.removeChild(yearLevelSelect.lastChild);
            }

            yearLevels.forEach(yearLevel => {
                const option = document.createElement('option');
                option.value = yearLevel.id;
                option.textContent = yearLevel.levelName;
                yearLevelSelect.appendChild(option);
            });
        }

        // Populate subject dropdown
        function populateSubjectDropdown(subjects) {
            const subjectSelect = document.getElementById('subjectSelect');
            if (!subjectSelect) return;

            // Clear existing options except the first one
            while (subjectSelect.children.length > 1) {
                subjectSelect.removeChild(subjectSelect.lastChild);
            }

            subjects.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject.id;
                option.textContent = `${subject.id} - ${subject.subjectName}`;
                subjectSelect.appendChild(option);
            });
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            // Add to page
            document.body.appendChild(toast);
            
            // Initialize and show toast
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Display courses in the table
        function displayCourses(courses) {
            const tbody = document.querySelector('tbody');
            if (!tbody) return;

            // Clear existing rows
            tbody.innerHTML = '';

            if (courses.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <i class="fas fa-book fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No courses found. Add your first course using the form above.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            courses.forEach(course => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${course.courseName}</strong></td>
                    <td>${course.description || 'No description'}</td>
                    <td>${course.departmentName || 'No Department'}</td>
                    <td>
                        <span class="badge bg-info" id="subjectCount-${course.id}">Loading...</span>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary action-btn" title="Edit" onclick="editCourse(${course.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-info action-btn" title="Manage Subjects" onclick="manageCourseSubjects(${course.id}, '${course.courseName}')">
                                <i class="fas fa-book"></i>
                            </button>
                            <button class="btn btn-outline-danger action-btn" title="Delete" onclick="deleteCourse(${course.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
                
                // Load subject count for this course
                loadSubjectCount(course.id);
            });

            // Update total count
            const totalBadge = document.querySelector('.badge.bg-primary');
            if (totalBadge) {
                totalBadge.textContent = `Total: ${courses.length}`;
            }
        }

        // Filter courses by department
        async function filterCourses() {
            const departmentId = document.getElementById('filterDepartment').value;
            
            try {
                let url = '/api/v1/course';
                if (departmentId) {
                    url = `/api/v1/course/department/${departmentId}`;
                }
                
                const response = await fetch(url);
                if (response.ok) {
                    const courses = await response.json();
                    displayCourses(courses);
                } else {
                    console.error('Failed to filter courses');
                }
            } catch (error) {
                console.error('Error filtering courses:', error);
            }
        }

        // Clear filter
        function clearFilter() {
            document.getElementById('filterDepartment').value = '';
            loadCourses();
        }

        // Create course function
        async function createCourse() {
            const courseName = document.getElementById('courseName').value;
            const description = document.getElementById('description').value;
            const departmentId = document.getElementById('departmentId').value;

            if (!courseName.trim()) {
                showToast('Course name is required', 'error');
                return;
            }

            const courseData = {
                courseName: courseName,
                description: description,
                departmentId: departmentId ? parseInt(departmentId) : null
            };

            try {
                const response = await fetch('/api/v1/course', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(courseData)
                });

                if (response.ok) {
                    // Clear form and close modal
                    document.getElementById('courseForm').reset();
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addCourseModal'));
                    modal.hide();
                    loadCourses(); // Refresh the course list
                    showToast('Course created successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to create course', 'error');
                }
            } catch (error) {
                console.error('Error creating course:', error);
                showToast('Error creating course', 'error');
            }
        }

        // Edit course function
        function editCourse(courseId) {
            // Load course data and open edit modal
            loadCourseForEdit(courseId);
        }

        // Load course data for editing
        async function loadCourseForEdit(courseId) {
            try {
                const response = await fetch(`/api/v1/course/${courseId}`);
                if (response.ok) {
                    const course = await response.json();
                    openEditModal(course);
                } else {
                    showToast('Failed to load course data', 'error');
                }
            } catch (error) {
                console.error('Error loading course:', error);
                showToast('Error loading course data', 'error');
            }
        }

        // Open edit modal with course data
        function openEditModal(course) {
            // Create edit modal if it doesn't exist
            if (!document.getElementById('editCourseModal')) {
                createEditModal();
            }

            // Populate form with course data
            document.getElementById('editCourseId').value = course.id;
            document.getElementById('editCourseName').value = course.courseName;
            document.getElementById('editDescription').value = course.description || '';
            document.getElementById('editDepartmentId').value = course.departmentId || '';

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('editCourseModal'));
            modal.show();
        }

        // Create edit modal
        function createEditModal() {
            const modalHtml = `
                <div class="modal fade" id="editCourseModal" tabindex="-1" aria-labelledby="editCourseModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editCourseModalLabel">Edit Course</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="editCourseForm">
                                    <input type="hidden" id="editCourseId">
                                    <div class="mb-3">
                                        <label for="editCourseName" class="form-label">Course Name *</label>
                                        <input type="text" class="form-control" id="editCourseName" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="editDepartmentId" class="form-label">Department *</label>
                                        <select class="form-select" id="editDepartmentId" required>
                                            <option value="">Select Department</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label for="editDescription" class="form-label">Description</label>
                                        <textarea class="form-control" id="editDescription" rows="3"></textarea>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="updateCourse()">Update Course</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        // Update course
        async function updateCourse() {
            const courseId = document.getElementById('editCourseId').value;
            const courseName = document.getElementById('editCourseName').value;
            const description = document.getElementById('editDescription').value;
            const departmentId = document.getElementById('editDepartmentId').value;

            if (!courseName.trim()) {
                showToast('Course name is required', 'error');
                return;
            }

            const courseData = {
                courseName: courseName,
                description: description,
                departmentId: departmentId ? parseInt(departmentId) : null
            };

            try {
                const response = await fetch(`/api/v1/course/${courseId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(courseData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editCourseModal'));
                    modal.hide();
                    loadCourses(); // Refresh the course list
                    showToast('Course updated successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to update course', 'error');
                }
            } catch (error) {
                console.error('Error updating course:', error);
                showToast('Error updating course', 'error');
            }
        }

        // Delete course function
        async function deleteCourse(courseId) {
            if (confirm('Are you sure you want to delete this course? This action cannot be undone.')) {
                try {
                    const response = await fetch(`/api/v1/course/${courseId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        loadCourses(); // Refresh the course list
                        showToast('Course deleted successfully!', 'success');
                    } else {
                        const error = await response.json();
                        showToast(error.message || 'Failed to delete course', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting course:', error);
                    showToast('Error deleting course', 'error');
                }
            }
        }

        // Manage course subjects
        function manageCourseSubjects(courseId, courseName) {
            // Open modal for course subject management
            const modal = new bootstrap.Modal(document.getElementById('courseSubjectsModal'));
            document.getElementById('courseSubjectsModalLabel').textContent = `Manage Subjects - ${courseName}`;
            document.getElementById('courseSubjectsCourseId').value = courseId;
            
            // Load course subjects
            loadCourseSubjects(courseId);
            modal.show();
        }

        // Load course subjects
        async function loadCourseSubjects(courseId) {
            try {
                const response = await fetch(`/api/v1/coursesubject/course/${courseId}`);
                if (response.ok) {
                    const subjects = await response.json();
                    displayCourseSubjects(subjects);
                } else {
                    console.error('Failed to load course subjects');
                }
            } catch (error) {
                console.error('Error loading course subjects:', error);
            }
        }

        // Refresh subject count for a course
        async function refreshSubjectCount(courseId) {
            await loadSubjectCount(courseId);
        }

        // Display course subjects
        function displayCourseSubjects(subjects) {
            const tbody = document.getElementById('courseSubjectsTableBody');
            if (!tbody) return;

            tbody.innerHTML = '';

            if (subjects.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <i class="fas fa-book fa-2x text-muted mb-2"></i>
                            <p class="text-muted">No subjects assigned to this course.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            subjects.forEach(subject => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><span class="badge bg-secondary">${subject.subjectId}</span></td>
                    <td>${subject.subjectName}</td>
                    <td>${subject.units || 'N/A'}</td>
                    <td>${subject.yearLevelName}</td>
                    <td>${subject.semesterName}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-danger btn-sm" onclick="removeCourseSubject(${subject.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Add course subject
        async function addCourseSubject() {
            const courseId = document.getElementById('courseSubjectsCourseId').value;
            const subjectId = document.getElementById('subjectSelect').value;
            const yearLevelId = document.getElementById('yearLevelSelect').value;
            const semesterId = document.getElementById('semesterSelect').value;
            const isRequired = document.getElementById('isRequired').checked;

            if (!subjectId || !yearLevelId || !semesterId) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            const courseSubjectData = {
                courseId: parseInt(courseId),
                subjectId: parseInt(subjectId),
                yearLevelId: parseInt(yearLevelId),
                semesterId: parseInt(semesterId),
                isRequired: isRequired
            };

            try {
                const response = await fetch('/api/v1/coursesubject', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(courseSubjectData)
                });

                if (response.ok) {
                    // Clear form
                    document.getElementById('addCourseSubjectForm').reset();
                    // Refresh the course subjects list
                    loadCourseSubjects(courseId);
                    // Refresh subject count
                    refreshSubjectCount(courseId);
                    showToast('Subject added to course successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to add subject to course', 'error');
                }
            } catch (error) {
                console.error('Error adding course subject:', error);
                showToast('Error adding subject to course', 'error');
            }
        }

        // Remove course subject
        async function removeCourseSubject(courseSubjectId) {
            if (confirm('Are you sure you want to remove this subject from the course?')) {
                try {
                    const response = await fetch(`/api/v1/coursesubject/${courseSubjectId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        // Get the course ID to refresh the list
                        const courseId = document.getElementById('courseSubjectsCourseId').value;
                        // Refresh the course subjects list
                        loadCourseSubjects(courseId);
                        // Refresh subject count
                        refreshSubjectCount(courseId);
                        showToast('Subject removed from course successfully!', 'success');
                    } else {
                        const error = await response.json();
                        showToast(error.message || 'Failed to remove subject from course', 'error');
                    }
                } catch (error) {
                    console.error('Error removing course subject:', error);
                    showToast('Error removing subject from course', 'error');
                }
            }
        }

        // Simple search functionality
        document.querySelector('.search-box input').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });

        // Sample data for demonstration
        const sampleCourses = [
            {
                code: 'CS-101',
                name: 'Introduction to Computer Science',
                department: 'Computer Science',
                credits: 3,
                level: '100',
                instructor: 'Dr. Sarah Johnson',
                semester: 'Fall 2024',
                capacity: 45,
                status: 'Active'
            },
            {
                code: 'MATH-201',
                name: 'Calculus II',
                department: 'Mathematics',
                credits: 4,
                level: '200',
                instructor: 'Prof. Michael Chen',
                semester: 'Fall 2024',
                capacity: 35,
                status: 'Active'
            }
        ];

        // Function to populate sample data (optional)
        function populateSampleData() {
            const tbody = document.querySelector('tbody');
            if (tbody.children.length === 1) {
                sampleCourses.forEach(course => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td><span class="course-code">${course.code}</span></td>
                        <td>${course.name}</td>
                        <td>${course.department}</td>
                        <td>${course.credits}</td>
                        <td>${course.level} Level</td>
                        <td>${course.instructor}</td>
                        <td>${course.semester}</td>
                        <td>${course.capacity}</td>
                        <td><span class="badge bg-success">${course.status}</span></td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary action-btn" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-warning action-btn" title="Toggle Status">
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                                <button class="btn btn-outline-danger action-btn" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
                
                document.querySelector('.badge.bg-primary').textContent = `Total: ${sampleCourses.length}`;
            }
        }

        // Uncomment to show sample data
        // document.addEventListener('DOMContentLoaded', populateSampleData);
    </script>
</body>
</html>
