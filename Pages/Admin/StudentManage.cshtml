@page "/Admin/StudentManage"
@model StudentPeformanceTracker.Pages.Admin.AdminStudentManageModel
@{
    ViewData["Title"] = "Student Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Admin Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Student Management specific styles only */
        /* No specific styles needed - all common styles are in shared navigation */
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Student Management</h1>
                    <div class="d-flex align-items-center">
                        <div class="search-box me-3">
                            <input type="text" class="form-control" placeholder="Search students...">
                            <i class="fas fa-search"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=3498db&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="javascript:void(0)" onclick="handleLogout()"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Student List -->
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title mb-0">Student List</h3>
                    <div>
                        <button class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Add Student
                        </button>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Student ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Year Level</th>
                                <th>Course</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="studentTableBody">
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <i class="fas fa-spinner fa-spin fa-2x text-muted mb-2"></i>
                                    <p class="text-muted">Loading students...</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="text-muted">
                        Showing <span id="showingFrom">0</span> to <span id="showingTo">0</span> of <span id="totalCount">0</span> entries
                    </div>
                    <nav>
                        <ul class="pagination mb-0" id="pagination">
                            <!-- Pagination buttons will be generated here -->
                        </ul>
                    </nav>
                </div>
            </div>
        </main>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle sidebar functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
        
        // Pagination variables
        let currentPage = 1;
        const pageSize = 10;
        let totalPages = 0;
        let totalCount = 0;

        // Load admin data and students on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAdminData();
            loadStudents();
        });

        // Load admin data from API
        async function loadAdminData() {
            try {
                const response = await fetch('/api/v1/admin/profile');
                if (response.ok) {
                    const adminData = await response.json();
                    updateHeader(adminData);
                } else {
                    console.error('Failed to load admin data');
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }

        // Update header with real admin data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=3498db&color=fff`;
        }

        // Load students from API
        async function loadStudents(page = 1) {
            try {
                currentPage = page;
                const response = await fetch(`/api/v1/student?page=${page}&pageSize=${pageSize}`);
                if (response.ok) {
                    const result = await response.json();
                    totalPages = result.totalPages;
                    totalCount = result.totalCount;
                    displayStudents(result.data);
                    updatePagination();
                } else {
                    console.error('Failed to load students');
                    showErrorState();
                }
            } catch (error) {
                console.error('Error loading students:', error);
                showErrorState();
            }
        }

        // Display students in the table
        function displayStudents(students) {
            const tbody = document.getElementById('studentTableBody');
            if (!tbody) return;

            // Clear existing rows
            tbody.innerHTML = '';

            if (students.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-user-graduate fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No students found.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            // Debug: Log the first student to see the actual data structure
            if (students.length > 0) {
                console.log('First student data:', students[0]);
            }

            students.forEach(student => {
                const row = document.createElement('tr');
                const statusBadge = student.status === 'Active' 
                    ? '<span class="badge bg-success">Active</span>' 
                    : '<span class="badge bg-warning">Inactive</span>';
                
                const yearLevelText = getYearLevelText(student.yearLevel);
                const actionButtons = getStudentActionButtons(student);

                row.innerHTML = `
                    <td>${student.studentId || 'N/A'}</td>
                    <td>${student.firstName} ${student.lastName}</td>
                    <td>${student.email || 'N/A'}</td>
                    <td>${yearLevelText}</td>
                    <td>${student.courseName || 'N/A'}</td>
                    <td>${statusBadge}</td>
                    <td>${actionButtons}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Get year level text
        function getYearLevelText(yearLevel) {
            const yearTexts = {
                1: '1st Year',
                2: '2nd Year', 
                3: '3rd Year',
                4: '4th Year',
                5: '5th Year'
            };
            return yearTexts[yearLevel] || 'N/A';
        }

        // Get student action buttons HTML
        function getStudentActionButtons(student) {
            let buttons = '';
            
            // Check if student is inactive (case-insensitive)
            if (student.status && student.status.toLowerCase() === 'inactive') {
                buttons += `
                    <button class="btn btn-outline-success action-btn" title="Activate Student" onclick="activateStudent(${student.userId})">
                        <i class="fas fa-check"></i>
                    </button>
                `;
            } else {
                buttons += `
                    <button class="btn btn-outline-warning action-btn" title="Deactivate Student" onclick="deactivateStudent(${student.userId})">
                        <i class="fas fa-times"></i>
                    </button>
                `;
            }
            
            buttons += `
                <button class="btn btn-outline-primary action-btn" title="Edit Student" onclick="editStudent(${student.id})">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-outline-info action-btn" title="View Details" onclick="viewStudent(${student.id})">
                    <i class="fas fa-eye"></i>
                </button>
            `;
            
            return `<div class="btn-group btn-group-sm">${buttons}</div>`;
        }

        // Show error state
        function showErrorState() {
            const tbody = document.getElementById('studentTableBody');
            if (tbody) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
                            <p class="text-danger">Error loading students. Please try again.</p>
                            <button class="btn btn-outline-primary" onclick="loadStudents()">
                                <i class="fas fa-refresh me-2"></i>Retry
                            </button>
                        </td>
                    </tr>
                `;
            }
        }

        // Activate student (uses userId to update User status)
        async function activateStudent(userId) {
            if (confirm('Are you sure you want to activate this student?')) {
                try {
                    const response = await fetch(`/api/v1/user-management/${userId}/activate`, {
                        method: 'PUT'
                    });
                    
                    if (response.ok) {
                        alert('Student activated successfully!');
                        loadStudents(); // Reload the list
                    } else {
                        const error = await response.json();
                        console.error('Activation error:', error);
                        alert(`Failed to activate student: ${error.message || 'Unknown error'}`);
                    }
                } catch (error) {
                    console.error('Error activating student:', error);
                    alert('Error activating student');
                }
            }
        }

        // Deactivate student (uses userId to update User status)
        async function deactivateStudent(userId) {
            if (confirm('Are you sure you want to deactivate this student?')) {
                try {
                    const response = await fetch(`/api/v1/user-management/${userId}/deactivate`, {
                        method: 'PUT'
                    });
                    
                    if (response.ok) {
                        alert('Student deactivated successfully!');
                        loadStudents(); // Reload the list
                    } else {
                        const error = await response.json();
                        console.error('Deactivation error:', error);
                        alert(`Failed to deactivate student: ${error.message || 'Unknown error'}`);
                    }
                } catch (error) {
                    console.error('Error deactivating student:', error);
                    alert('Error deactivating student');
                }
            }
        }

        // Edit student
        function editStudent(studentId) {
            alert(`Edit student with ID: ${studentId}`);
            // TODO: Implement edit functionality
        }

        // View student details
        function viewStudent(studentId) {
            alert(`View student details for ID: ${studentId}`);
            // TODO: Implement view details functionality
        }

        // Pagination functions
        function updatePagination() {
            const showingFrom = totalCount > 0 ? (currentPage - 1) * pageSize + 1 : 0;
            const showingTo = Math.min(currentPage * pageSize, totalCount);
            
            document.getElementById('showingFrom').textContent = showingFrom;
            document.getElementById('showingTo').textContent = showingTo;
            document.getElementById('totalCount').textContent = totalCount;
            
            renderPaginationButtons();
        }

        function renderPaginationButtons() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            
            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage - 1}); return false;">Previous</a>`;
            pagination.appendChild(prevLi);
            
            // Page numbers (show max 5 pages)
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${i}); return false;">${i}</a>`;
                pagination.appendChild(li);
            }
            
            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage + 1}); return false;">Next</a>`;
            pagination.appendChild(nextLi);
        }

        function goToPage(page) {
            if (page < 1 || page > totalPages) return;
            loadStudents(page);
        }

        // Set active menu item
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            if (item.getAttribute('href') === window.location.pathname) {
                item.classList.add('active');
            }
            
            item.addEventListener('click', function() {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });
    </script>
</body>
</html>
