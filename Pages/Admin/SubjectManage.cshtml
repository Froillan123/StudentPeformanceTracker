@page "/Admin/SubjectManage"
@model StudentPeformanceTracker.Pages.Admin.SubjectManageModel
@{
    ViewData["Title"] = "Subject Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Admin Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Subject Management specific styles only */
        .subject-code {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: var(--primary-color);
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Subject Management</h1>
                    <div class="d-flex align-items-center">
                        <div class="search-box me-3">
                            <input type="text" class="form-control" placeholder="Search subjects..." id="searchInput">
                            <i class="fas fa-search"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=3498db&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="javascript:void(0)" onclick="handleLogout()"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Add Subject Button -->
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center">
                    <h3 class="section-title mb-0">Subject Management</h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSubjectModal">
                        <i class="fas fa-plus me-2"></i>Add New Subject
                    </button>
                </div>
            </div>

            <!-- Subjects List -->
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title mb-0">Subject List</h3>
                    <div>
                        <span class="badge bg-primary">Total: 0</span>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Subject Name</th>
                                <th>Course</th>
                                <th>Units</th>
                                <th>Prerequisites</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <i class="fas fa-spinner fa-spin fa-2x text-muted mb-2"></i>
                                    <p class="text-muted">Loading subjects...</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="text-muted">
                        Showing <span id="showingFrom">0</span> to <span id="showingTo">0</span> of <span id="totalCount">0</span> entries
                    </div>
                    <nav>
                        <ul class="pagination mb-0" id="pagination">
                            <!-- Pagination buttons will be generated here -->
                        </ul>
                    </nav>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Subject Modal -->
    <div class="modal fade" id="addSubjectModal" tabindex="-1" aria-labelledby="addSubjectModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addSubjectModalLabel">Add New Subject</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="subjectForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="subjectName" class="form-label">Subject Name *</label>
                                    <input type="text" class="form-control" id="subjectName" name="subjectName" placeholder="e.g., Introduction to Computer Science" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="courseId" class="form-label">Course *</label>
                                    <select class="form-select" id="courseId" name="courseId" required>
                                        <option value="">Select Course</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="units" class="form-label">Units *</label>
                                    <select class="form-select" id="units" name="units" required>
                                        <option value="">Select Units</option>
                                        <option value="1">1 Unit</option>
                                        <option value="2">2 Units</option>
                                        <option value="3" selected>3 Units</option>
                                        <option value="4">4 Units</option>
                                        <option value="5">5 Units</option>
                                        <option value="6">6 Units</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="status" class="form-label">Status</label>
                                    <select class="form-select" id="status" name="status">
                                        <option value="true" selected>Active</option>
                                        <option value="false">Inactive</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Enter subject description..."></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label for="prerequisites" class="form-label">Prerequisites</label>
                            <input type="text" class="form-control" id="prerequisites" name="prerequisites" placeholder="e.g., CS100, MATH101">
                            <div class="form-text">Optional: List prerequisite subjects separated by commas</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createSubject()">
                        <i class="fas fa-plus me-2"></i>Add Subject
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle sidebar functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
        
        // Set active menu item
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            if (item.getAttribute('href') === window.location.pathname) {
                item.classList.add('active');
            }
            
            item.addEventListener('click', function() {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });

        // Pagination variables
        let currentPage = 1;
        const pageSize = 10;
        let totalPages = 0;
        let totalCount = 0;
        let loadedCourses = [];

        // Load admin data, courses, and subjects on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAdminData();
            loadCourses();
            loadSubjects();
        });

        // Load admin data from API
        async function loadAdminData() {
            try {
                const response = await fetch('/api/v1/admin/profile');
                if (response.ok) {
                    const adminData = await response.json();
                    updateHeader(adminData);
                } else {
                    console.error('Failed to load admin data');
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }

        // Update header with real admin data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=3498db&color=fff`;
        }

        // Load courses from API
        async function loadCourses() {
            try {
                const response = await fetch('/api/v1/course');
                if (response.ok) {
                    const result = await response.json();
                    const courses = Array.isArray(result) ? result : (result.data || []);
                    loadedCourses = courses;
                    populateCourseDropdown(courses);
                } else {
                    console.error('Failed to load courses');
                }
            } catch (error) {
                console.error('Error loading courses:', error);
            }
        }

        // Populate course dropdown
        function populateCourseDropdown(courses) {
            const courseSelects = document.querySelectorAll('#courseId, #editCourseId');
            
            courseSelects.forEach(select => {
                // Clear existing options except the first one
                while (select.children.length > 1) {
                    select.removeChild(select.lastChild);
                }
                
                courses.forEach(course => {
                    const option = document.createElement('option');
                    option.value = course.id;
                    option.textContent = course.courseName;
                    select.appendChild(option);
                });
            });
        }

        // Load subjects from API
        async function loadSubjects(page = 1) {
            try {
                currentPage = page;
                const response = await fetch(`/api/v1/subject?page=${page}&pageSize=${pageSize}`);
                if (response.ok) {
                    const result = await response.json();
                    totalPages = result.totalPages;
                    totalCount = result.totalCount;
                    displaySubjects(result.data);
                    updatePagination();
                } else {
                    console.error('Failed to load subjects');
                }
            } catch (error) {
                console.error('Error loading subjects:', error);
            }
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            // Add to page
            document.body.appendChild(toast);
            
            // Initialize and show toast
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Display subjects in the table
        function displaySubjects(subjects) {
            const tbody = document.querySelector('tbody');
            if (!tbody) return;

            // Clear existing rows
            tbody.innerHTML = '';

            if (subjects.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-book fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No subjects found. Add your first subject using the form above.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            subjects.forEach(subject => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><span class="badge bg-secondary">${subject.id}</span></td>
                    <td><strong>${subject.subjectName}</strong></td>
                    <td>${subject.courseName || 'No Course'}</td>
                    <td><span class="badge bg-info">${subject.units} units</span></td>
                    <td>${subject.prerequisites || 'None'}</td>
                    <td>
                        <span class="badge ${subject.isActive ? 'bg-success' : 'bg-secondary'}">
                            ${subject.isActive ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary action-btn" title="Edit" onclick="editSubject(${subject.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-danger action-btn" title="Delete" onclick="deleteSubject(${subject.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // Update total count
            const totalBadge = document.querySelector('.badge.bg-primary');
            if (totalBadge) {
                totalBadge.textContent = `Total: ${subjects.length}`;
            }
        }

        // Create subject function
        async function createSubject() {
            const subjectName = document.getElementById('subjectName').value;
            const units = document.getElementById('units').value;
            const description = document.getElementById('description').value;
            const prerequisites = document.getElementById('prerequisites').value;
            const status = document.getElementById('status').value === 'true';
            const courseId = document.getElementById('courseId').value;

            if (!subjectName.trim() || !units || !courseId) {
                showToast('Subject name, units, and course are required', 'error');
                return;
            }

            const subjectData = {
                subjectName: subjectName,
                units: parseInt(units),
                description: description,
                prerequisites: prerequisites,
                isActive: status,
                courseId: parseInt(courseId)
            };

            try {
                const response = await fetch('/api/v1/subject', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(subjectData)
                });

                if (response.ok) {
                    // Clear form and close modal
                    document.getElementById('subjectForm').reset();
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addSubjectModal'));
                    modal.hide();
                    loadSubjects();
                    showToast('Subject created successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to create subject', 'error');
                }
            } catch (error) {
                console.error('Error creating subject:', error);
                showToast('Error creating subject', 'error');
            }
        }

        // Clear form
        function clearForm() {
            document.getElementById('subjectForm').reset();
        }

        // Edit subject function
        function editSubject(subjectId) {
            loadSubjectForEdit(subjectId);
        }

        // Load subject data for editing
        async function loadSubjectForEdit(subjectId) {
            try {
                const response = await fetch(`/api/v1/subject/${subjectId}`);
                if (response.ok) {
                    const subject = await response.json();
                    openEditModal(subject);
                } else {
                    showToast('Failed to load subject data', 'error');
                }
            } catch (error) {
                console.error('Error loading subject:', error);
                showToast('Error loading subject data', 'error');
            }
        }

        // Open edit modal with subject data
        function openEditModal(subject) {
            // Create edit modal if it doesn't exist
            if (!document.getElementById('editSubjectModal')) {
                createEditModal();
                // populate courses into newly created select
                if (loadedCourses && loadedCourses.length) {
                    populateCourseDropdown(loadedCourses);
                }
            }

            // Populate form with subject data
            document.getElementById('editSubjectId').value = subject.id;
            document.getElementById('editSubjectName').value = subject.subjectName;
            document.getElementById('editCourseId').value = subject.courseId || '';
            document.getElementById('editUnits').value = subject.units;
            document.getElementById('editDescription').value = subject.description || '';
            document.getElementById('editPrerequisites').value = subject.prerequisites || '';
            document.getElementById('editStatus').value = subject.isActive ? 'true' : 'false';

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('editSubjectModal'));
            modal.show();
        }

        // Create edit modal
        function createEditModal() {
            const modalHtml = `
                <div class="modal fade" id="editSubjectModal" tabindex="-1" aria-labelledby="editSubjectModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editSubjectModalLabel">Edit Subject</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="editSubjectForm">
                                    <input type="hidden" id="editSubjectId">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="editSubjectName" class="form-label">Subject Name *</label>
                                                <input type="text" class="form-control" id="editSubjectName" required>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="editCourseId" class="form-label">Course *</label>
                                                <select class="form-select" id="editCourseId" required>
                                                    <option value="">Select Course</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="editUnits" class="form-label">Units *</label>
                                                <select class="form-select" id="editUnits" required>
                                                    <option value="1">1 Unit</option>
                                                    <option value="2">2 Units</option>
                                                    <option value="3">3 Units</option>
                                                    <option value="4">4 Units</option>
                                                    <option value="5">5 Units</option>
                                                    <option value="6">6 Units</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="editStatus" class="form-label">Status</label>
                                                <select class="form-select" id="editStatus">
                                                    <option value="true">Active</option>
                                                    <option value="false">Inactive</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="editDescription" class="form-label">Description</label>
                                        <textarea class="form-control" id="editDescription" rows="3"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label for="editPrerequisites" class="form-label">Prerequisites</label>
                                        <input type="text" class="form-control" id="editPrerequisites">
                                        <div class="form-text">Optional: List prerequisite subjects separated by commas</div>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="updateSubject()">Update Subject</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        // Update subject
        async function updateSubject() {
            const subjectId = document.getElementById('editSubjectId').value;
            const subjectName = document.getElementById('editSubjectName').value;
            const units = document.getElementById('editUnits').value;
            const description = document.getElementById('editDescription').value;
            const prerequisites = document.getElementById('editPrerequisites').value;
            const status = document.getElementById('editStatus').value === 'true';
            const courseId = document.getElementById('editCourseId').value;

            if (!subjectName.trim() || !units || !courseId) {
                showToast('Subject name, units, and course are required', 'error');
                return;
            }

            const subjectData = {
                subjectName: subjectName,
                units: parseInt(units),
                description: description,
                prerequisites: prerequisites,
                isActive: status,
                courseId: parseInt(courseId)
            };

            try {
                const response = await fetch(`/api/v1/subject/${subjectId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(subjectData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editSubjectModal'));
                    modal.hide();
                    loadSubjects();
                    showToast('Subject updated successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to update subject', 'error');
                }
            } catch (error) {
                console.error('Error updating subject:', error);
                showToast('Error updating subject', 'error');
            }
        }

        // Delete subject function
        async function deleteSubject(subjectId) {
            if (confirm('Are you sure you want to delete this subject? This action cannot be undone.')) {
                try {
                    const response = await fetch(`/api/v1/subject/${subjectId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        loadSubjects();
                        showToast('Subject deleted successfully!', 'success');
                    } else {
                        const error = await response.json();
                        showToast(error.message || 'Failed to delete subject', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting subject:', error);
                    showToast('Error deleting subject', 'error');
                }
            }
        }

        // Pagination functions
        function updatePagination() {
            const showingFrom = totalCount > 0 ? (currentPage - 1) * pageSize + 1 : 0;
            const showingTo = Math.min(currentPage * pageSize, totalCount);
            
            document.getElementById('showingFrom').textContent = showingFrom;
            document.getElementById('showingTo').textContent = showingTo;
            document.getElementById('totalCount').textContent = totalCount;
            
            renderPaginationButtons();
        }

        function renderPaginationButtons() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            
            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage - 1}); return false;">Previous</a>`;
            pagination.appendChild(prevLi);
            
            // Page numbers (show max 5 pages)
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${i}); return false;">${i}</a>`;
                pagination.appendChild(li);
            }
            
            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="goToPage(${currentPage + 1}); return false;">Next</a>`;
            pagination.appendChild(nextLi);
        }

        function goToPage(page) {
            if (page < 1 || page > totalPages) return;
            loadSubjects(page);
        }

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });
    </script>
</body>
</html>
