@page "/Admin/TeacherManage"
@model StudentPeformanceTracker.Pages.Admin.AdminTeacherManageModel
@{
    ViewData["Title"] = "Teacher Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Admin Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            overflow-x: hidden;
        }
        
        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: var(--sidebar-width);
            background-color: var(--secondary-color);
            color: white;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        
        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }
        
        .sidebar-header {
            padding: 1.5rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            text-align: center;
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar.collapsed .sidebar-header h3 {
            display: none;
        }
        
        .sidebar-menu {
            padding: 1rem 0;
        }
        
        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }
        
        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: rgba(255,255,255,0.1);
            color: white;
            border-left: 4px solid var(--primary-color);
        }
        
        .sidebar-menu i {
            width: 24px;
            margin-right: 1rem;
            text-align: center;
        }
        
        .sidebar.collapsed .sidebar-menu span {
            display: none;
        }
        
        .sidebar.collapsed .sidebar-menu i {
            margin-right: 0;
        }
        
        .toggle-btn {
            position: absolute;
            top: 1rem;
            right: -15px;
            background-color: var(--secondary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        /* Main Content Area */
        .main-content {
            margin-left: var(--sidebar-width);
            transition: all 0.3s ease;
            min-height: 100vh;
            background-color: #f8f9fa;
        }
        
        .main-content.expanded {
            margin-left: var(--sidebar-collapsed-width);
        }
        
        .dashboard-header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 0;
        }
        
        .card-custom {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            border: none;
        }
        
        .section-title {
            color: var(--secondary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
        }
        
        .table th {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .action-btn {
            padding: 0.25rem 0.5rem;
            margin: 0 0.1rem;
            font-size: 0.875rem;
        }
        
        .search-box {
            position: relative;
        }
        
        .search-box input {
            padding-right: 2.5rem;
        }
        
        .search-box i {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_AdminNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Teacher Management</h1>
                    <div class="d-flex align-items-center">
                        <div class="search-box me-3">
                            <input type="text" class="form-control" placeholder="Search teachers...">
                            <i class="fas fa-search"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=3498db&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="javascript:void(0)" onclick="handleLogout()"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Teacher List -->
            <div class="card-custom">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title mb-0">Teacher List</h3>
                    <div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTeacherModal">
                            <i class="fas fa-plus me-2"></i>Add Teacher
                        </button>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Status</th>
                                <th>Qualification</th>
                                <th>Phone</th>
                                <th>Hire Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="teachersTableBody">
                            <!-- Data will be loaded here via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Teacher Modal -->
    <div class="modal fade" id="addTeacherModal" tabindex="-1" aria-labelledby="addTeacherModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addTeacherModalLabel">Add New Teacher</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addTeacherForm">
                        <!-- Account Information -->
                        <h6 class="fw-bold mb-3">
                            <i class="fas fa-user-lock me-2"></i>Account Information
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="username" class="form-label">Username *</label>
                                <input type="text" class="form-control" id="username" name="username" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="password" class="form-label">Password *</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                        </div>

                        <!-- Personal Information -->
                        <h6 class="fw-bold mb-3 mt-4">
                            <i class="fas fa-user me-2"></i>Personal Information
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="firstName" class="form-label">First Name *</label>
                                <input type="text" class="form-control" id="firstName" name="firstName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="lastName" class="form-label">Last Name *</label>
                                <input type="text" class="form-control" id="lastName" name="lastName" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email Address *</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="phone" class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" id="phone" name="phone">
                            </div>
                        </div>

                        <!-- Employment Information -->
                        <h6 class="fw-bold mb-3 mt-4">
                            <i class="fas fa-briefcase me-2"></i>Employment Information
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="highestQualification" class="form-label">Highest Qualification</label>
                                <input type="text" class="form-control" id="highestQualification" name="highestQualification" placeholder="e.g., Master's Degree, PhD">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="status" class="form-label">Employment Status *</label>
                                <select class="form-select" id="status" name="status" required>
                                    <option value="Full-time">Full-time</option>
                                    <option value="Part-time">Part-time</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="hireDate" class="form-label">Hire Date</label>
                                <input type="date" class="form-control" id="hireDate" name="hireDate">
                            </div>
                        </div>

                        <!-- Emergency Contact -->
                        <h6 class="fw-bold mb-3 mt-4">
                            <i class="fas fa-phone-alt me-2"></i>Emergency Contact
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="emergencyContact" class="form-label">Emergency Contact Name</label>
                                <input type="text" class="form-control" id="emergencyContact" name="emergencyContact">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="emergencyPhone" class="form-label">Emergency Contact Phone</label>
                                <input type="tel" class="form-control" id="emergencyPhone" name="emergencyPhone">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveTeacherBtn">Create Teacher</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle sidebar functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
        
        // Set active menu item
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            if (item.getAttribute('href') === window.location.pathname) {
                item.classList.add('active');
            }
            
            item.addEventListener('click', function() {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });

        // Load admin data and teachers on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAdminData();
            loadTeachers();
        });

        // Load admin data from API
        async function loadAdminData() {
            try {
                const response = await fetch('/api/v1/admin/profile');
                if (response.ok) {
                    const adminData = await response.json();
                    updateHeader(adminData);
                } else {
                    console.error('Failed to load admin data');
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }

        // Update header with real admin data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=3498db&color=fff`;
        }

        // Load teachers from API
        async function loadTeachers() {
            try {
                const response = await fetch('/api/v1/teacher');
                if (response.ok) {
                    const teachers = await response.json();
                    displayTeachers(teachers);
                } else {
                    console.error('Failed to load teachers');
                }
            } catch (error) {
                console.error('Error loading teachers:', error);
            }
        }


        // Add teacher functionality
        document.getElementById('saveTeacherBtn').addEventListener('click', async function() {
            const form = document.getElementById('addTeacherForm');
            const formData = new FormData(form);
            
            const teacherData = {
                Username: formData.get('username'),
                Password: formData.get('password'),
                Email: formData.get('email'),
                FirstName: formData.get('firstName'),
                LastName: formData.get('lastName'),
                Phone: formData.get('phone'),
                HighestQualification: formData.get('highestQualification'),
                Status: formData.get('status'),
                EmergencyContact: formData.get('emergencyContact'),
                EmergencyPhone: formData.get('emergencyPhone'),
                HireDate: formData.get('hireDate') ? new Date(formData.get('hireDate')).toISOString() : null
            };

            try {
                const response = await fetch('/api/v1/teacher/admin-create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(teacherData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addTeacherModal'));
                    modal.hide();
                    form.reset();
                    loadTeachers();
                    showToast('Teacher created successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to create teacher', 'error');
                }
            } catch (error) {
                console.error('Error creating teacher:', error);
                showToast('Error creating teacher', 'error');
            }
        });

        // Show toast notification
        function showToast(message, type = 'info') {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            // Add to page
            document.body.appendChild(toast);
            
            // Initialize and show toast
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Edit teacher function
        function editTeacher(id) {
            alert(`Edit teacher with ID: ${id}`);
        }

        // Delete teacher function
        function deleteTeacher(id) {
            if (confirm('Are you sure you want to delete this teacher?')) {
                alert(`Delete teacher with ID: ${id}`);
            }
        }
    </script>


    <!-- Edit Teacher Modal -->
    <div class="modal fade" id="editTeacherModal" tabindex="-1" aria-labelledby="editTeacherModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editTeacherModalLabel">Edit Teacher</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editTeacherForm">
                        <input type="hidden" id="editTeacherId">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editTeacherEmail" class="form-label">Email *</label>
                                <input type="email" class="form-control" id="editTeacherEmail" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editTeacherDepartment" class="form-label">Department</label>
                                <select class="form-control" id="editTeacherDepartment">
                                    <option value="">Select Department</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editTeacherFirstName" class="form-label">First Name *</label>
                                <input type="text" class="form-control" id="editTeacherFirstName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editTeacherLastName" class="form-label">Last Name *</label>
                                <input type="text" class="form-control" id="editTeacherLastName" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editTeacherPhone" class="form-label">Phone</label>
                                <input type="tel" class="form-control" id="editTeacherPhone">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editTeacherHireDate" class="form-label">Hire Date</label>
                                <input type="date" class="form-control" id="editTeacherHireDate">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="updateTeacherBtn">Update Teacher</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Teacher Modal -->
    <div class="modal fade" id="deleteTeacherModal" tabindex="-1" aria-labelledby="deleteTeacherModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteTeacherModalLabel">Delete Teacher</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this teacher?</p>
                    <p class="text-danger"><strong>This action cannot be undone.</strong></p>
                    <input type="hidden" id="deleteTeacherId">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteTeacherBtn">Delete Teacher</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Load teachers on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadTeachers();
        });

        // Load teachers from API
        async function loadTeachers() {
            try {
                const response = await fetch('/api/v1/teacher');
                if (response.ok) {
                    const teachers = await response.json();
                    displayTeachers(teachers);
                } else {
                    console.error('Failed to load teachers');
                }
            } catch (error) {
                console.error('Error loading teachers:', error);
            }
        }

        // Display teachers in table
        function displayTeachers(teachers) {
            const tbody = document.getElementById('teachersTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';

            if (teachers.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-chalkboard-teacher fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No teachers found.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            teachers.forEach(teacher => {
                const row = document.createElement('tr');
                const statusBadge = teacher.status === 'Full-time' 
                    ? '<span class="badge bg-success">Full-time</span>' 
                    : '<span class="badge bg-info">Part-time</span>';

                row.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(teacher.firstName + ' ' + teacher.lastName)}&background=3498db&color=fff" class="user-avatar me-3">
                            <div>
                                <div class="fw-bold">${teacher.firstName} ${teacher.lastName}</div>
                                <div class="text-muted small">${teacher.email}</div>
                            </div>
                        </div>
                    </td>
                    <td>${teacher.email}</td>
                    <td>${statusBadge}</td>
                    <td>${teacher.highestQualification || '-'}</td>
                    <td>${teacher.phone || '-'}</td>
                    <td>${teacher.hireDate ? new Date(teacher.hireDate).toLocaleDateString() : '-'}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary action-btn" title="Edit" onclick="editTeacher(${teacher.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-danger action-btn" title="Delete" onclick="deleteTeacher(${teacher.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }


        // Edit teacher
        function editTeacher(id) {
            fetch(`/api/v1/teacher/${id}`)
                .then(response => response.json())
                .then(teacher => {
                    document.getElementById('editTeacherId').value = teacher.id;
                    document.getElementById('editTeacherEmail').value = teacher.email;
                    document.getElementById('editTeacherFirstName').value = teacher.firstName;
                    document.getElementById('editTeacherLastName').value = teacher.lastName;
                    document.getElementById('editTeacherPhone').value = teacher.phone || '';
                    document.getElementById('editTeacherHireDate').value = teacher.hireDate ? new Date(teacher.hireDate).toISOString().split('T')[0] : '';
                    
                    const modal = new bootstrap.Modal(document.getElementById('editTeacherModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error loading teacher:', error);
                    showToast('Error loading teacher', 'error');
                });
        }

        // Update teacher
        document.getElementById('updateTeacherBtn').addEventListener('click', async function() {
            const id = document.getElementById('editTeacherId').value;
            const teacherData = {
                email: document.getElementById('editTeacherEmail').value,
                firstName: document.getElementById('editTeacherFirstName').value,
                lastName: document.getElementById('editTeacherLastName').value,
                phone: document.getElementById('editTeacherPhone').value,
                hireDate: document.getElementById('editTeacherHireDate').value ? new Date(document.getElementById('editTeacherHireDate').value) : null
            };

            try {
                const response = await fetch(`/api/v1/teacher/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(teacherData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editTeacherModal'));
                    modal.hide();
                    loadTeachers();
                    showToast('Teacher updated successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to update teacher', 'error');
                }
            } catch (error) {
                console.error('Error updating teacher:', error);
                showToast('Error updating teacher', 'error');
            }
        });

        // Delete teacher
        function deleteTeacher(id) {
            document.getElementById('deleteTeacherId').value = id;
            const modal = new bootstrap.Modal(document.getElementById('deleteTeacherModal'));
            modal.show();
        }

        // Confirm delete teacher
        document.getElementById('confirmDeleteTeacherBtn').addEventListener('click', async function() {
            const id = document.getElementById('deleteTeacherId').value;

            try {
                const response = await fetch(`/api/v1/teacher/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteTeacherModal'));
                    modal.hide();
                    loadTeachers();
                    showToast('Teacher deleted successfully!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Failed to delete teacher', 'error');
                }
            } catch (error) {
                console.error('Error deleting teacher:', error);
                showToast('Error deleting teacher', 'error');
            }
        });

        // Show toast notification
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
    </script>
</body>
</html>
