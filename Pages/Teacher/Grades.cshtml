@page "/Teacher/Grades"
@model StudentPeformanceTracker.Pages.Teacher.TeacherGradesModel
@{
    ViewData["Title"] = "Grade Management";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Teacher Portal</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2196F3;
            --secondary-color: #f5f5f5;
            --accent-color: #FF9800;
            --text-color: #333;
            --border-color: #e0e0e0;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f9f9f9;
            color: var(--text-color);
            overflow-x: hidden;
        }
        
        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: var(--sidebar-width);
            background-color: var(--primary-color);
            color: white;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        
        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }
        
        .sidebar-header {
            padding: 1.5rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            text-align: center;
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar.collapsed .sidebar-header h3 {
            display: none;
        }
        
        .sidebar-menu {
            padding: 1rem 0;
        }
        
        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }
        
        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: rgba(255,255,255,0.1);
            color: white;
            border-left: 4px solid var(--accent-color);
        }
        
        .sidebar-menu i {
            width: 24px;
            margin-right: 1rem;
            text-align: center;
        }
        
        .sidebar.collapsed .sidebar-menu span {
            display: none;
        }
        
        .sidebar.collapsed .sidebar-menu i {
            margin-right: 0;
        }
        
        .toggle-btn {
            position: absolute;
            top: 1rem;
            right: -15px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        /* Main Content Area */
        .main-content {
            margin-left: var(--sidebar-width);
            transition: all 0.3s ease;
            min-height: 100vh;
            background-color: #f9f9f9;
        }
        
        .main-content.expanded {
            margin-left: var(--sidebar-collapsed-width);
        }
        
        .dashboard-header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 0;
        }
        
        .card-custom {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            border: none;
        }
        
        .card-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .section-title {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--accent-color);
            padding-bottom: 0.5rem;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .grade-table {
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .grade-table th {
            background-color: var(--primary-color);
            color: white;
            border: none;
        }
        
        .grade-badge {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }
    </style>
</head>
<body>
    <!-- Sidebar Navigation -->
    @await Html.PartialAsync("Shared/_TeacherNavigation")

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Dashboard Header -->
        <header class="dashboard-header">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">Grade Management</h1>
                    <div class="d-flex align-items-center">
                        <button class="btn btn-primary me-2">
                            <i class="fas fa-plus me-1"></i>Add Grade
                        </button>
                        <button class="btn btn-success me-2">
                            <i class="fas fa-download me-1"></i>Export
                        </button>
                        <div class="dropdown">
                            <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <img src="https://ui-avatars.com/api/?name=Loading&background=2196F3&color=fff" class="user-avatar me-2" id="headerAvatar">
                                <span id="headerName">Loading...</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="/Profile"><i class="fas fa-user me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="/LoginPage"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Content -->
        <main class="container my-4">
            <!-- Grade Management Content -->
            <div class="card-custom">
                <h3 class="section-title">Student Grades</h3>
                
                <!-- Grade Statistics -->
                <div class="row mb-4" id="gradeStats">
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-primary" id="totalStudents">-</h5>
                                <p class="card-text">Total Students</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-success" id="averageGrade">-</h5>
                                <p class="card-text">Average Grade</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-warning" id="pendingGrades">-</h5>
                                <p class="card-text">Pending Grades</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-info" id="completionRate">-</h5>
                                <p class="card-text">Completion Rate</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Grades Table -->
                <div class="grade-table">
                    <table class="table table-hover mb-0">
                        <thead>
                            <tr>
                                <th>Student Name</th>
                                <th>Student ID</th>
                                <th>Assignment</th>
                                <th>Score</th>
                                <th>Grade</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="gradesTableBody">
                            <!-- Grades will be loaded here via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Add Grade Modal -->
    <div class="modal fade" id="addGradeModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-plus-circle me-2"></i>Add Grade</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addGradeForm">
                        <input type="hidden" id="addGradeStudentSubjectId">
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <h6 id="addGradeStudentName" class="text-muted"></h6>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="assessmentType" class="form-label">Assessment Type <span class="text-danger">*</span></label>
                                <select class="form-select" id="assessmentType" required>
                                    <option value="">Select type...</option>
                                    <option value="Quiz">Quiz</option>
                                    <option value="Exam">Exam</option>
                                    <option value="Project">Project</option>
                                    <option value="Assignment">Assignment</option>
                                    <option value="Recitation">Recitation</option>
                                    <option value="Attendance">Attendance</option>
                                    <option value="Practical">Practical</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="assessmentName" class="form-label">Assessment Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="assessmentName" placeholder="e.g., Midterm Exam, Quiz 1" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="score" class="form-label">Score <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="score" placeholder="e.g., 45" min="0" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="maxScore" class="form-label">Max Score <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="maxScore" placeholder="e.g., 50" min="1" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="percentage" class="form-label">Percentage</label>
                                <input type="text" class="form-control" id="percentage" readonly placeholder="Auto-calculated">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="dateGiven" class="form-label">Date Given <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="dateGiven" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="remarks" class="form-label">Remarks</label>
                                <input type="text" class="form-control" id="remarks" placeholder="Optional notes">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitGrade()">
                        <i class="fas fa-save me-2"></i>Save Grade
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- View Student Grades Modal -->
    <div class="modal fade" id="viewGradesModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-chart-line me-2"></i>Student Grades</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <h6 id="viewGradesStudentName" class="text-muted mb-3"></h6>
                    
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Assessment Type</th>
                                    <th>Assessment Name</th>
                                    <th>Score</th>
                                    <th>Percentage</th>
                                    <th>Remarks</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="studentGradesTableBody">
                                <tr>
                                    <td colspan="7" class="text-center py-4">
                                        <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
                                        <p class="text-muted mt-2">Loading grades...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="alert alert-info mt-3">
                        <strong>Computed Final Grade:</strong> <span id="computedFinalGrade" class="h5">-</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Grade Modal -->
    <div class="modal fade" id="editGradeModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-edit me-2"></i>Edit Grade</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editGradeForm">
                        <input type="hidden" id="editGradeId">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editAssessmentType" class="form-label">Assessment Type <span class="text-danger">*</span></label>
                                <select class="form-select" id="editAssessmentType" required>
                                    <option value="">Select type...</option>
                                    <option value="Quiz">Quiz</option>
                                    <option value="Exam">Exam</option>
                                    <option value="Project">Project</option>
                                    <option value="Assignment">Assignment</option>
                                    <option value="Recitation">Recitation</option>
                                    <option value="Attendance">Attendance</option>
                                    <option value="Practical">Practical</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editAssessmentName" class="form-label">Assessment Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="editAssessmentName" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="editScore" class="form-label">Score <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editScore" min="0" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editMaxScore" class="form-label">Max Score <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editMaxScore" min="1" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editPercentage" class="form-label">Percentage</label>
                                <input type="text" class="form-control" id="editPercentage" readonly>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editDateGiven" class="form-label">Date Given <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="editDateGiven" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editRemarks" class="form-label">Remarks</label>
                                <input type="text" class="form-control" id="editRemarks">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updateGrade()">
                        <i class="fas fa-save me-2"></i>Update Grade
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle sidebar functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const toggleIcon = this.querySelector('i');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            if (sidebar.classList.contains('collapsed')) {
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        });
        
        // Load teacher data on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadTeacherData();
            loadGradesData();
        });

        let currentTeacherId = null;
        let currentSectionSubjectId = null;

        // Load teacher data from API
        async function loadTeacherData() {
            try {
                const response = await fetch('/api/v1/teacher/profile');
                if (response.ok) {
                    const teacherData = await response.json();
                    currentTeacherId = teacherData.id;
                    updateHeader(teacherData);
                } else {
                    console.error('Failed to load teacher data');
                }
            } catch (error) {
                console.error('Error loading teacher data:', error);
            }
        }

        // Update header with real teacher data
        function updateHeader(data) {
            const fullName = `${data.firstName} ${data.lastName}`;
            document.getElementById('headerName').textContent = fullName;
            document.getElementById('headerAvatar').src = `https://ui-avatars.com/api/?name=${encodeURIComponent(fullName)}&background=2196F3&color=fff`;
        }

        // Load grades data
        async function loadGradesData() {
            try {
                // Get sectionSubjectId from URL parameters
                const urlParams = new URLSearchParams(window.location.search);
                currentSectionSubjectId = urlParams.get('sectionSubjectId');
                
                if (!currentSectionSubjectId) {
                    displayNoClassSelected();
                    return;
                }

                // Load students for this section subject
                const studentsResponse = await fetch(`/api/v1/studentsubject/sectionsubject/${currentSectionSubjectId}`);
                if (studentsResponse.ok) {
                    const students = await studentsResponse.json();
                    displayGradesTable(students);
                    calculateStatistics(students);
                } else {
                    displayErrorState();
                }
            } catch (error) {
                console.error('Error loading grades data:', error);
                displayErrorState();
            }
        }

        // Display grades table
        function displayGradesTable(students) {
            const tbody = document.getElementById('gradesTableBody');
            if (!tbody) return;

            tbody.innerHTML = '';

            if (students.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <i class="fas fa-user-graduate fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No students enrolled in this class.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            students.forEach(student => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${student.firstName} ${student.lastName}</td>
                    <td>${student.studentId || 'N/A'}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick="viewStudentGrades(${student.id})">
                            <i class="fas fa-chart-line me-1"></i>View Grades
                        </button>
                    </td>
                    <td>-</td>
                    <td><span class="badge bg-secondary grade-badge">-</span></td>
                    <td><span class="badge bg-warning">No Grades</span></td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary me-1" onclick="addGrade(${student.id})">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="viewStudentGrades(${student.id})">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Calculate and display statistics
        function calculateStatistics(students) {
            const totalStudents = students.length;
            document.getElementById('totalStudents').textContent = totalStudents;
            
            // For now, show placeholder values - these would need actual grade calculations
            document.getElementById('averageGrade').textContent = '-';
            document.getElementById('pendingGrades').textContent = totalStudents;
            document.getElementById('completionRate').textContent = '0%';
        }

        // Display no class selected state
        function displayNoClassSelected() {
            const tbody = document.getElementById('gradesTableBody');
            if (!tbody) return;

            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center py-5">
                        <i class="fas fa-chalkboard-teacher fa-4x text-muted mb-3"></i>
                        <h4 class="text-muted">No Class Selected</h4>
                        <p class="text-muted">Please select a class from <a href="/Teacher/MyClasses">My Classes</a> to manage grades.</p>
                    </td>
                </tr>
            `;
        }

        // Display error state
        function displayErrorState() {
            const tbody = document.getElementById('gradesTableBody');
            if (!tbody) return;

            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
                        <p class="text-danger">Error loading grades data. Please try again.</p>
                        <button class="btn btn-outline-primary" onclick="loadGradesData()">
                            <i class="fas fa-refresh me-2"></i>Retry
                        </button>
                    </td>
                </tr>
            `;
        }

        // Modal instances
        let addGradeModal, viewGradesModal, editGradeModal;
        let currentStudentSubjectData = null;

        // Initialize modals
        document.addEventListener('DOMContentLoaded', function() {
            addGradeModal = new bootstrap.Modal(document.getElementById('addGradeModal'));
            viewGradesModal = new bootstrap.Modal(document.getElementById('viewGradesModal'));
            editGradeModal = new bootstrap.Modal(document.getElementById('editGradeModal'));

            // Auto-calculate percentage when score or maxScore changes
            document.getElementById('score').addEventListener('input', calculatePercentage);
            document.getElementById('maxScore').addEventListener('input', calculatePercentage);
            document.getElementById('editScore').addEventListener('input', calculateEditPercentage);
            document.getElementById('editMaxScore').addEventListener('input', calculateEditPercentage);

            // Set default date to today
            document.getElementById('dateGiven').valueAsDate = new Date();
        });

        function calculatePercentage() {
            const score = parseFloat(document.getElementById('score').value) || 0;
            const maxScore = parseFloat(document.getElementById('maxScore').value) || 0;
            if (maxScore > 0) {
                const percentage = ((score / maxScore) * 100).toFixed(2);
                document.getElementById('percentage').value = percentage + '%';
            } else {
                document.getElementById('percentage').value = '';
            }
        }

        function calculateEditPercentage() {
            const score = parseFloat(document.getElementById('editScore').value) || 0;
            const maxScore = parseFloat(document.getElementById('editMaxScore').value) || 0;
            if (maxScore > 0) {
                const percentage = ((score / maxScore) * 100).toFixed(2);
                document.getElementById('editPercentage').value = percentage + '%';
            } else {
                document.getElementById('editPercentage').value = '';
            }
        }

        // Add grade for student
        async function addGrade(studentSubjectId) {
            // Find the student data
            const students = await getStudentsForClass();
            const student = students.find(s => s.id === studentSubjectId);
            
            if (!student) {
                alert('Student not found');
                return;
            }

            currentStudentSubjectData = student;
            document.getElementById('addGradeStudentSubjectId').value = studentSubjectId;
            document.getElementById('addGradeStudentName').textContent = `Student: ${student.firstName} ${student.lastName} (${student.studentId || 'N/A'})`;
            
            // Reset form
            document.getElementById('addGradeForm').reset();
            document.getElementById('dateGiven').valueAsDate = new Date();
            
            addGradeModal.show();
        }

        async function getStudentsForClass() {
            const urlParams = new URLSearchParams(window.location.search);
            const sectionSubjectId = urlParams.get('sectionSubjectId');
            
            if (!sectionSubjectId) return [];

            try {
                const response = await fetch(`/api/v1/studentsubject/sectionsubject/${sectionSubjectId}`);
                if (response.ok) {
                    return await response.json();
                }
            } catch (error) {
                console.error('Error fetching students:', error);
            }
            return [];
        }

        async function submitGrade() {
            const studentSubjectId = document.getElementById('addGradeStudentSubjectId').value;
            const assessmentType = document.getElementById('assessmentType').value;
            const assessmentName = document.getElementById('assessmentName').value;
            const score = parseFloat(document.getElementById('score').value);
            const maxScore = parseFloat(document.getElementById('maxScore').value);
            const dateGiven = document.getElementById('dateGiven').value;
            const remarks = document.getElementById('remarks').value;

            if (!assessmentType || !assessmentName || isNaN(score) || isNaN(maxScore) || !dateGiven) {
                alert('Please fill in all required fields');
                return;
            }

            if (score < 0 || maxScore <= 0 || score > maxScore) {
                alert('Invalid score or max score values');
                return;
            }

            const percentage = ((score / maxScore) * 100).toFixed(2);

            try {
                const response = await fetch('/api/v1/grade', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        studentSubjectId: parseInt(studentSubjectId),
                        assessmentType: assessmentType,
                        assessmentName: assessmentName,
                        score: score,
                        maxScore: maxScore,
                        percentage: parseFloat(percentage),
                        dateGiven: dateGiven,
                        remarks: remarks || null
                    })
                });

                if (response.ok) {
                    alert('Grade added successfully!');
                    addGradeModal.hide();
                    loadGradesData(); // Reload the table
                } else {
                    const error = await response.json();
                    alert('Failed to add grade: ' + (error.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error adding grade:', error);
                alert('Error adding grade');
            }
        }

        // View student grades
        async function viewStudentGrades(studentSubjectId) {
            // Find the student data
            const students = await getStudentsForClass();
            const student = students.find(s => s.id === studentSubjectId);
            
            if (!student) {
                alert('Student not found');
                return;
            }

            document.getElementById('viewGradesStudentName').textContent = `${student.firstName} ${student.lastName} (${student.studentId || 'N/A'})`;
            
            // Load grades
            await loadStudentGrades(studentSubjectId);
            
            viewGradesModal.show();
        }

        async function loadStudentGrades(studentSubjectId) {
            const tbody = document.getElementById('studentGradesTableBody');
            
            try {
                const response = await fetch(`/api/v1/grade/studentsubject/${studentSubjectId}`);
                
                if (response.ok) {
                    const grades = await response.json();
                    
                    if (grades.length === 0) {
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <i class="fas fa-inbox fa-3x text-muted mb-2"></i>
                                    <p class="text-muted">No grades recorded yet</p>
                                </td>
                            </tr>
                        `;
                        document.getElementById('computedFinalGrade').textContent = '-';
                        return;
                    }

                    displayStudentGrades(grades);
                    
                    // Calculate final grade
                    const avgPercentage = grades.reduce((sum, g) => sum + g.percentage, 0) / grades.length;
                    document.getElementById('computedFinalGrade').textContent = avgPercentage.toFixed(2) + '%';
                } else {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="7" class="text-center py-4 text-danger">
                                <p>Error loading grades</p>
                            </td>
                        </tr>
                    `;
                }
            } catch (error) {
                console.error('Error loading student grades:', error);
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4 text-danger">
                            <p>Error loading grades</p>
                        </td>
                    </tr>
                `;
            }
        }

        function displayStudentGrades(grades) {
            const tbody = document.getElementById('studentGradesTableBody');
            
            tbody.innerHTML = grades.map(grade => `
                <tr>
                    <td>${new Date(grade.dateGiven).toLocaleDateString()}</td>
                    <td><span class="badge bg-primary">${grade.assessmentType}</span></td>
                    <td>${grade.assessmentName}</td>
                    <td>${grade.score} / ${grade.maxScore}</td>
                    <td>${grade.percentage.toFixed(2)}%</td>
                    <td>${grade.remarks || '-'}</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" onclick="openEditGradeModal(${grade.id}, ${JSON.stringify(grade).replace(/"/g, '&quot;')})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteGrade(${grade.id}, ${grade.studentSubjectId})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function openEditGradeModal(gradeId, gradeData) {
            document.getElementById('editGradeId').value = gradeId;
            document.getElementById('editAssessmentType').value = gradeData.assessmentType;
            document.getElementById('editAssessmentName').value = gradeData.assessmentName;
            document.getElementById('editScore').value = gradeData.score;
            document.getElementById('editMaxScore').value = gradeData.maxScore;
            document.getElementById('editDateGiven').value = gradeData.dateGiven.split('T')[0];
            document.getElementById('editRemarks').value = gradeData.remarks || '';
            
            calculateEditPercentage();
            
            viewGradesModal.hide();
            editGradeModal.show();
        }

        async function updateGrade() {
            const gradeId = document.getElementById('editGradeId').value;
            const assessmentType = document.getElementById('editAssessmentType').value;
            const assessmentName = document.getElementById('editAssessmentName').value;
            const score = parseFloat(document.getElementById('editScore').value);
            const maxScore = parseFloat(document.getElementById('editMaxScore').value);
            const dateGiven = document.getElementById('editDateGiven').value;
            const remarks = document.getElementById('editRemarks').value;

            if (!assessmentType || !assessmentName || isNaN(score) || isNaN(maxScore) || !dateGiven) {
                alert('Please fill in all required fields');
                return;
            }

            if (score < 0 || maxScore <= 0 || score > maxScore) {
                alert('Invalid score or max score values');
                return;
            }

            const percentage = ((score / maxScore) * 100).toFixed(2);

            try {
                const response = await fetch(`/api/v1/grade/${gradeId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        assessmentType: assessmentType,
                        assessmentName: assessmentName,
                        score: score,
                        maxScore: maxScore,
                        percentage: parseFloat(percentage),
                        dateGiven: dateGiven,
                        remarks: remarks || null
                    })
                });

                if (response.ok) {
                    alert('Grade updated successfully!');
                    editGradeModal.hide();
                    // Reload student grades view if still open
                    const studentSubjectId = document.getElementById('addGradeStudentSubjectId').value;
                    await loadStudentGrades(studentSubjectId);
                    viewGradesModal.show();
                    loadGradesData(); // Reload main table
                } else {
                    const error = await response.json();
                    alert('Failed to update grade: ' + (error.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error updating grade:', error);
                alert('Error updating grade');
            }
        }

        async function deleteGrade(gradeId, studentSubjectId) {
            if (!confirm('Are you sure you want to delete this grade?')) {
                return;
            }

            try {
                const response = await fetch(`/api/v1/grade/${gradeId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert('Grade deleted successfully!');
                    await loadStudentGrades(studentSubjectId);
                    loadGradesData(); // Reload main table
                } else {
                    const error = await response.json();
                    alert('Failed to delete grade: ' + (error.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error deleting grade:', error);
                alert('Error deleting grade');
            }
        }

        // Set active menu item
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            if (item.getAttribute('href') === window.location.pathname) {
                item.classList.add('active');
            }
            
            item.addEventListener('click', function() {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });
    </script>
</body>
</html>
